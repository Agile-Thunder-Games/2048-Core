/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var n={767:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(15),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,'@media screen and (max-width: 520px) {\r\n    html, body {\r\n        font-size: 15px;\r\n    }\r\n\r\n    body {\r\n        margin: 20px 0;\r\n        padding: 0 20px;\r\n    }\r\n\r\n    .container {\r\n        width: 280px;\r\n        margin: 0 auto;\r\n    }\r\n\r\n    .score-container, .best-container {\r\n        margin-top: 0;\r\n        padding: 15px 10px;\r\n        min-width: 40px;\r\n    }\r\n\r\n    .heading {\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .game-intro {\r\n        width: 55%;\r\n        display: block;\r\n        box-sizing: border-box;\r\n        line-height: 1.65;\r\n    }\r\n\r\n    .restart-button {\r\n        padding: 0;\r\n        display: block;\r\n        box-sizing: border-box;\r\n        margin-top: 2px;\r\n    }\r\n\r\n    .game-container {\r\n        margin-top: 17px;\r\n        position: relative;\r\n        padding: 10px;\r\n        cursor: default;\r\n        -webkit-touch-callout: none;\r\n        -ms-touch-callout: none;\r\n        -webkit-user-select: none;\r\n        -moz-user-select: none;\r\n        -ms-user-select: none;\r\n        -ms-touch-action: none;\r\n        user-select: none;\r\n        touch-action: none;\r\n        width: 280px;\r\n        height: 280px;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    .game-container .game-message {\r\n        display: none;\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        background: rgba(238, 228, 218, 0.5);\r\n        z-index: 100;\r\n        text-align: center;\r\n        -webkit-animation: fade-in 800ms ease 1200ms;\r\n        animation: fade-in 800ms ease 1200ms;\r\n        -webkit-animation-fill-mode: both;\r\n        animation-fill-mode: both;\r\n    }\r\n\r\n    .game-container .game-message p {\r\n        font-size: 60px;\r\n        font-weight: bold;\r\n        height: 60px;\r\n        line-height: 60px;\r\n        margin-top: 222px;\r\n    }\r\n\r\n    .game-container .game-message .lower {\r\n        display: block;\r\n        margin-top: 59px;\r\n    }\r\n\r\n    .game-container .game-message a {\r\n        display: inline-block;\r\n        background: #8f7a66;\r\n        border-radius: 3px;\r\n        padding: 0 20px;\r\n        text-decoration: none;\r\n        color: #f9f6f2;\r\n        height: 40px;\r\n        line-height: 42px;\r\n        margin-left: 9px;\r\n    }\r\n\r\n    .game-container .game-message a.keep-playing-button {\r\n        display: none;\r\n    }\r\n\r\n    .game-container .game-message.game-won {\r\n        background: rgba(237, 194, 46, 0.5);\r\n        color: #f9f6f2;\r\n    }\r\n\r\n    .game-container .game-message.game-won a.keep-playing-button {\r\n        display: inline-block;\r\n    }\r\n\r\n    .game-container .game-message.game-won, .game-container .game-message.game-over {\r\n        display: block;\r\n    }\r\n\r\n    .grid-container {\r\n        position: absolute;\r\n        z-index: 1;\r\n    }\r\n\r\n    .grid-row {\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .grid-row:last-child {\r\n        margin-bottom: 0;\r\n    }\r\n\r\n    .grid-row:after {\r\n        content: "";\r\n        display: block;\r\n        clear: both;\r\n    }\r\n\r\n    .grid-cell {\r\n        width: 57.5px;\r\n        height: 57.5px;\r\n        margin-right: 10px;\r\n        float: left;\r\n        background: rgba(244, 216, 115, 0.35);\r\n    }\r\n\r\n    .grid-cell:last-child {\r\n        margin-right: 0;\r\n    }\r\n\r\n    .tile-container {\r\n        position: absolute;\r\n        z-index: 2;\r\n    }\r\n\r\n    .tile, .tile .tile-inner {\r\n        width: 58px;\r\n        height: 58px;\r\n        line-height: 58px;\r\n    }\r\n\r\n    .tile.tile-position-1-1 {\r\n        transform: translate(0px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-1-2 {\r\n        transform: translate(0px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-1-3 {\r\n        transform: translate(0px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-1-4 {\r\n        transform: translate(0px, 202px);\r\n    }\r\n\r\n    .tile.tile-position-2-1 {\r\n        transform: translate(67px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-2-2 {\r\n        transform: translate(67px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-2-3 {\r\n        transform: translate(67px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-2-4 {\r\n        transform: translate(67px, 202px);\r\n    }\r\n\r\n    .tile.tile-position-3-1 {\r\n        transform: translate(135px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-3-2 {\r\n        transform: translate(135px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-3-3 {\r\n        transform: translate(135px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-3-4 {\r\n        transform: translate(135px, 202px);\r\n    }\r\n\r\n    .tile.tile-position-4-1 {\r\n        transform: translate(202px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-4-2 {\r\n        transform: translate(202px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-4-3 {\r\n        transform: translate(202px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-4-4 {\r\n        transform: translate(202px, 202px);\r\n    }\r\n\r\n    .tile .tile-inner {\r\n        font-size: 35px;\r\n    }\r\n\r\n    .game-message p {\r\n        font-size: 30px !important;\r\n        height: 30px !important;\r\n        line-height: 30px !important;\r\n        margin-top: 90px !important;\r\n    }\r\n\r\n    .game-message .lower {\r\n        margin-top: 30px !important;\r\n    }\r\n}\r\n',"",{version:3,sources:["webpack://./src/css/game-mobile.css"],names:[],mappings:"AAAA;IACI;QACI,eAAe;IACnB;;IAEA;QACI,cAAc;QACd,eAAe;IACnB;;IAEA;QACI,YAAY;QACZ,cAAc;IAClB;;IAEA;QACI,aAAa;QACb,kBAAkB;QAClB,eAAe;IACnB;;IAEA;QACI,mBAAmB;IACvB;;IAEA;QACI,UAAU;QACV,cAAc;QACd,sBAAsB;QACtB,iBAAiB;IACrB;;IAEA;QACI,UAAU;QACV,cAAc;QACd,sBAAsB;QACtB,eAAe;IACnB;;IAEA;QACI,gBAAgB;QAChB,kBAAkB;QAClB,aAAa;QACb,eAAe;QACf,2BAA2B;QAC3B,uBAAuB;QACvB,yBAAyB;QACzB,sBAAsB;QACtB,qBAAqB;QACrB,sBAAsB;QACtB,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;QACZ,aAAa;QAGb,sBAAsB;IAC1B;;IAEA;QACI,aAAa;QACb,kBAAkB;QAClB,MAAM;QACN,QAAQ;QACR,SAAS;QACT,OAAO;QACP,oCAAoC;QACpC,YAAY;QACZ,kBAAkB;QAClB,4CAA4C;QAE5C,oCAAoC;QACpC,iCAAiC;QAEjC,yBAAyB;IAC7B;;IAEA;QACI,eAAe;QACf,iBAAiB;QACjB,YAAY;QACZ,iBAAiB;QACjB,iBAAiB;IACrB;;IAEA;QACI,cAAc;QACd,gBAAgB;IACpB;;IAEA;QACI,qBAAqB;QACrB,mBAAmB;QACnB,kBAAkB;QAClB,eAAe;QACf,qBAAqB;QACrB,cAAc;QACd,YAAY;QACZ,iBAAiB;QACjB,gBAAgB;IACpB;;IAEA;QACI,aAAa;IACjB;;IAEA;QACI,mCAAmC;QACnC,cAAc;IAClB;;IAEA;QACI,qBAAqB;IACzB;;IAEA;QACI,cAAc;IAClB;;IAEA;QACI,kBAAkB;QAClB,UAAU;IACd;;IAEA;QACI,mBAAmB;IACvB;;IAEA;QACI,gBAAgB;IACpB;;IAEA;QACI,WAAW;QACX,cAAc;QACd,WAAW;IACf;;IAEA;QACI,aAAa;QACb,cAAc;QACd,kBAAkB;QAClB,WAAW;QACX,qCAAqC;IACzC;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,kBAAkB;QAClB,UAAU;IACd;;IAEA;QACI,WAAW;QACX,YAAY;QACZ,iBAAiB;IACrB;;IAEA;QAII,8BAA8B;IAClC;;IAEA;QAII,+BAA+B;IACnC;;IAEA;QAII,gCAAgC;IACpC;;IAEA;QAII,gCAAgC;IACpC;;IAEA;QAII,+BAA+B;IACnC;;IAEA;QAII,gCAAgC;IACpC;;IAEA;QAII,iCAAiC;IACrC;;IAEA;QAII,iCAAiC;IACrC;;IAEA;QAII,gCAAgC;IACpC;;IAEA;QAII,iCAAiC;IACrC;;IAEA;QAII,kCAAkC;IACtC;;IAEA;QAII,kCAAkC;IACtC;;IAEA;QAII,gCAAgC;IACpC;;IAEA;QAII,iCAAiC;IACrC;;IAEA;QAII,kCAAkC;IACtC;;IAEA;QAII,kCAAkC;IACtC;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,0BAA0B;QAC1B,uBAAuB;QACvB,4BAA4B;QAC5B,2BAA2B;IAC/B;;IAEA;QACI,2BAA2B;IAC/B;AACJ",sourcesContent:['@media screen and (max-width: 520px) {\r\n    html, body {\r\n        font-size: 15px;\r\n    }\r\n\r\n    body {\r\n        margin: 20px 0;\r\n        padding: 0 20px;\r\n    }\r\n\r\n    .container {\r\n        width: 280px;\r\n        margin: 0 auto;\r\n    }\r\n\r\n    .score-container, .best-container {\r\n        margin-top: 0;\r\n        padding: 15px 10px;\r\n        min-width: 40px;\r\n    }\r\n\r\n    .heading {\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .game-intro {\r\n        width: 55%;\r\n        display: block;\r\n        box-sizing: border-box;\r\n        line-height: 1.65;\r\n    }\r\n\r\n    .restart-button {\r\n        padding: 0;\r\n        display: block;\r\n        box-sizing: border-box;\r\n        margin-top: 2px;\r\n    }\r\n\r\n    .game-container {\r\n        margin-top: 17px;\r\n        position: relative;\r\n        padding: 10px;\r\n        cursor: default;\r\n        -webkit-touch-callout: none;\r\n        -ms-touch-callout: none;\r\n        -webkit-user-select: none;\r\n        -moz-user-select: none;\r\n        -ms-user-select: none;\r\n        -ms-touch-action: none;\r\n        user-select: none;\r\n        touch-action: none;\r\n        width: 280px;\r\n        height: 280px;\r\n        -webkit-box-sizing: border-box;\r\n        -moz-box-sizing: border-box;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    .game-container .game-message {\r\n        display: none;\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        background: rgba(238, 228, 218, 0.5);\r\n        z-index: 100;\r\n        text-align: center;\r\n        -webkit-animation: fade-in 800ms ease 1200ms;\r\n        -moz-animation: fade-in 800ms ease 1200ms;\r\n        animation: fade-in 800ms ease 1200ms;\r\n        -webkit-animation-fill-mode: both;\r\n        -moz-animation-fill-mode: both;\r\n        animation-fill-mode: both;\r\n    }\r\n\r\n    .game-container .game-message p {\r\n        font-size: 60px;\r\n        font-weight: bold;\r\n        height: 60px;\r\n        line-height: 60px;\r\n        margin-top: 222px;\r\n    }\r\n\r\n    .game-container .game-message .lower {\r\n        display: block;\r\n        margin-top: 59px;\r\n    }\r\n\r\n    .game-container .game-message a {\r\n        display: inline-block;\r\n        background: #8f7a66;\r\n        border-radius: 3px;\r\n        padding: 0 20px;\r\n        text-decoration: none;\r\n        color: #f9f6f2;\r\n        height: 40px;\r\n        line-height: 42px;\r\n        margin-left: 9px;\r\n    }\r\n\r\n    .game-container .game-message a.keep-playing-button {\r\n        display: none;\r\n    }\r\n\r\n    .game-container .game-message.game-won {\r\n        background: rgba(237, 194, 46, 0.5);\r\n        color: #f9f6f2;\r\n    }\r\n\r\n    .game-container .game-message.game-won a.keep-playing-button {\r\n        display: inline-block;\r\n    }\r\n\r\n    .game-container .game-message.game-won, .game-container .game-message.game-over {\r\n        display: block;\r\n    }\r\n\r\n    .grid-container {\r\n        position: absolute;\r\n        z-index: 1;\r\n    }\r\n\r\n    .grid-row {\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .grid-row:last-child {\r\n        margin-bottom: 0;\r\n    }\r\n\r\n    .grid-row:after {\r\n        content: "";\r\n        display: block;\r\n        clear: both;\r\n    }\r\n\r\n    .grid-cell {\r\n        width: 57.5px;\r\n        height: 57.5px;\r\n        margin-right: 10px;\r\n        float: left;\r\n        background: rgba(244, 216, 115, 0.35);\r\n    }\r\n\r\n    .grid-cell:last-child {\r\n        margin-right: 0;\r\n    }\r\n\r\n    .tile-container {\r\n        position: absolute;\r\n        z-index: 2;\r\n    }\r\n\r\n    .tile, .tile .tile-inner {\r\n        width: 58px;\r\n        height: 58px;\r\n        line-height: 58px;\r\n    }\r\n\r\n    .tile.tile-position-1-1 {\r\n        -webkit-transform: translate(0px, 0px);\r\n        -moz-transform: translate(0px, 0px);\r\n        -ms-transform: translate(0px, 0px);\r\n        transform: translate(0px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-1-2 {\r\n        -webkit-transform: translate(0px, 67px);\r\n        -moz-transform: translate(0px, 67px);\r\n        -ms-transform: translate(0px, 67px);\r\n        transform: translate(0px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-1-3 {\r\n        -webkit-transform: translate(0px, 135px);\r\n        -moz-transform: translate(0px, 135px);\r\n        -ms-transform: translate(0px, 135px);\r\n        transform: translate(0px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-1-4 {\r\n        -webkit-transform: translate(0px, 202px);\r\n        -moz-transform: translate(0px, 202px);\r\n        -ms-transform: translate(0px, 202px);\r\n        transform: translate(0px, 202px);\r\n    }\r\n\r\n    .tile.tile-position-2-1 {\r\n        -webkit-transform: translate(67px, 0px);\r\n        -moz-transform: translate(67px, 0px);\r\n        -ms-transform: translate(67px, 0px);\r\n        transform: translate(67px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-2-2 {\r\n        -webkit-transform: translate(67px, 67px);\r\n        -moz-transform: translate(67px, 67px);\r\n        -ms-transform: translate(67px, 67px);\r\n        transform: translate(67px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-2-3 {\r\n        -webkit-transform: translate(67px, 135px);\r\n        -moz-transform: translate(67px, 135px);\r\n        -ms-transform: translate(67px, 135px);\r\n        transform: translate(67px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-2-4 {\r\n        -webkit-transform: translate(67px, 202px);\r\n        -moz-transform: translate(67px, 202px);\r\n        -ms-transform: translate(67px, 202px);\r\n        transform: translate(67px, 202px);\r\n    }\r\n\r\n    .tile.tile-position-3-1 {\r\n        -webkit-transform: translate(135px, 0px);\r\n        -moz-transform: translate(135px, 0px);\r\n        -ms-transform: translate(135px, 0px);\r\n        transform: translate(135px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-3-2 {\r\n        -webkit-transform: translate(135px, 67px);\r\n        -moz-transform: translate(135px, 67px);\r\n        -ms-transform: translate(135px, 67px);\r\n        transform: translate(135px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-3-3 {\r\n        -webkit-transform: translate(135px, 135px);\r\n        -moz-transform: translate(135px, 135px);\r\n        -ms-transform: translate(135px, 135px);\r\n        transform: translate(135px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-3-4 {\r\n        -webkit-transform: translate(135px, 202px);\r\n        -moz-transform: translate(135px, 202px);\r\n        -ms-transform: translate(135px, 202px);\r\n        transform: translate(135px, 202px);\r\n    }\r\n\r\n    .tile.tile-position-4-1 {\r\n        -webkit-transform: translate(202px, 0px);\r\n        -moz-transform: translate(202px, 0px);\r\n        -ms-transform: translate(202px, 0px);\r\n        transform: translate(202px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-4-2 {\r\n        -webkit-transform: translate(202px, 67px);\r\n        -moz-transform: translate(202px, 67px);\r\n        -ms-transform: translate(202px, 67px);\r\n        transform: translate(202px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-4-3 {\r\n        -webkit-transform: translate(202px, 135px);\r\n        -moz-transform: translate(202px, 135px);\r\n        -ms-transform: translate(202px, 135px);\r\n        transform: translate(202px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-4-4 {\r\n        -webkit-transform: translate(202px, 202px);\r\n        -moz-transform: translate(202px, 202px);\r\n        -ms-transform: translate(202px, 202px);\r\n        transform: translate(202px, 202px);\r\n    }\r\n\r\n    .tile .tile-inner {\r\n        font-size: 35px;\r\n    }\r\n\r\n    .game-message p {\r\n        font-size: 30px !important;\r\n        height: 30px !important;\r\n        line-height: 30px !important;\r\n        margin-top: 90px !important;\r\n    }\r\n\r\n    .game-message .lower {\r\n        margin-top: 30px !important;\r\n    }\r\n}\r\n'],sourceRoot:""}]);const s=a},891:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(15),i=e.n(r),o=e(645),a=e.n(o)()(i());a.push([n.id,':root {\r\n    --blue: rgb(0, 113, 188);\r\n    --white: rgb(248, 248, 248);\r\n    --width: 475px;\r\n    --heigh: var(--width);\r\n    --tile-color: var(--white);\r\n    --tile-4-background: var(--white);\r\n    --tile-8-background: rgb(0, 174, 239);;\r\n    --tile-16-background: rgb(145, 0, 145);\r\n    --tile-32-background: rgb(255, 138, 0);\r\n    --tile-64-background: rgb(140, 198, 0);\r\n    --tile-128-background: rgb(121, 122, 223);\r\n    --tile-256-background: rgb(86, 65, 132);\r\n    --tile-512-background:  rgb(23, 35, 61);\r\n    --tile-1024-background: rgb(255, 121, 25);\r\n    --tile-2048-background:  rgb(200, 83, 0);\r\n    --tile-super-backgroud:  #38362f;\r\n}\r\n\r\nhtml, body {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nbody {\r\n    color: var(--blue);\r\n    background: var(--white);\r\n    font-family: "Clear Sans", "Helvetica Neue", Arial, sans-serif;\r\n    font-size: 18px;\r\n}\r\n\r\np {\r\n    margin-top: 0;\r\n    margin-bottom: 10px;\r\n    line-height: 1.65;\r\n}\r\n\r\na {\r\n    color: rgb(0, 113, 188);\r\n    font-weight: bold;\r\n    text-decoration: underline;\r\n    cursor: pointer;\r\n}\r\n\r\nhr {\r\n    border: none;\r\n    border-bottom: 1px solid #d8d4d0;\r\n    margin-top: 20px;\r\n    margin-bottom: 30px;\r\n}\r\n\r\n\r\n.container {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.footer {\r\n    text-align: center;\r\n}\r\n\r\n.heading:after {\r\n    content: "";\r\n    display: block;\r\n    clear: both;\r\n}\r\n\r\n.scores-container {\r\n    float: left;\r\n    text-align: left;\r\n}\r\n\r\n.score-container,\r\n.best-container {\r\n    position: relative;\r\n    display: inline-block;\r\n    background: rgb(0, 113, 188);\r\n    padding: 15px 25px;\r\n    font-size: 25px;\r\n    height: 25px;\r\n    line-height: 47px;\r\n    font-weight: bold;\r\n    color: white;\r\n    text-align: center;\r\n}\r\n\r\n.score-container:after,\r\n.best-container:after {\r\n    position: absolute;\r\n    width: 100%;\r\n    top: 10px;\r\n    left: 0;\r\n    text-transform: uppercase;\r\n    font-size: 13px;\r\n    line-height: 13px;\r\n    text-align: center;\r\n    color: white;\r\n}\r\n\r\n.score-container:after {\r\n    content: "Резултат";\r\n}\r\n\r\n.best-container:after {\r\n    content: "Рекорд";\r\n}\r\n\r\n.important {\r\n    text-transform: uppercase;\r\n}\r\n\r\n.game-container {\r\n    margin-top: 1em;\r\n    padding: 0.85em;\r\n    cursor: default;\r\n    -webkit-touch-callout: none;\r\n    -ms-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    -ms-touch-action: none;\r\n    user-select: none;\r\n    touch-action: none;\r\n    background: rgb(0, 113, 188);\r\n    width: var(--width);\r\n    height: var(--heigh);\r\n    border-radius: 3.5rem;    \r\n}\r\n\r\n.game-container .game-message {\r\n    display: none;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background: rgba(0, 174, 239, 0.5);\r\n    z-index: 100;\r\n    text-align: center;\r\n}\r\n\r\n.game-container .game-message p {\r\n    font-size: 60px;\r\n    font-weight: bold;\r\n    height: 60px;\r\n    color: white;\r\n    line-height: 60px;\r\n    margin-top: 222px;\r\n}\r\n\r\n.game-container .game-message .lower {\r\n    display: block;\r\n    margin-top: 59px;\r\n}\r\n\r\n.game-container .game-message a {\r\n    display: inline-block;\r\n    background: rgba(58, 90, 155, 0.5);\r\n    border-radius: 3px;\r\n    padding: 0 20px;\r\n    text-decoration: none;\r\n    color: white;\r\n    height: 40px;\r\n    line-height: 42px;\r\n    margin-left: 9px;\r\n}\r\n\r\n.game-container .game-message a.keep-playing-button {\r\n    display: none;\r\n}\r\n\r\n.game-container .game-message.game-won {\r\n    background: rgba(58, 90, 155, 0.5);\r\n    color: white;\r\n}\r\n\r\n.game-container .game-message.game-won a.keep-playing-button {\r\n    display: inline-block;\r\n }\r\n\r\n.game-container .game-message.game-won,\r\n.game-container .game-message.game-over {\r\n    display: block;\r\n}\r\n\r\n.grid-container {\r\n    position: absolute;\r\n}\r\n\r\n.grid-row {\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.grid-row:last-child {\r\n    margin-bottom: 0;\r\n}\r\n\r\n.grid-row:after {\r\n    content: "";\r\n    display: block;\r\n    clear: both;\r\n}\r\n\r\n.grid-cell {\r\n    width: 106.25px;\r\n    height: 106.25px;\r\n    margin-right: 15px;\r\n    float: left;\r\n    background: rgba(244, 216, 115, 0.25);\r\n    border-radius: 50%;\r\n}\r\n\r\n.grid-cell:last-child {\r\n    margin-right: 0;\r\n}\r\n\r\n.tile, .tile .tile-inner {\r\n    width: 107px;\r\n    height: 107px;\r\n    line-height: 107px;\r\n    border-radius: 50%;\r\n}\r\n\r\n.tile.tile-position-1-1 {\r\n    transform: translate(0px, 0px);\r\n}\r\n\r\n.tile.tile-position-1-2 {\r\n    transform: translate(0px, 121px);\r\n}\r\n\r\n.tile.tile-position-1-3 {\r\n    transform: translate(0px, 242px);\r\n}\r\n\r\n.tile.tile-position-1-4 {\r\n    transform: translate(0px, 363px);\r\n}\r\n\r\n.tile.tile-position-2-1 {\r\n    transform: translate(121px, 0px);\r\n}\r\n\r\n.tile.tile-position-2-2 {\r\n    transform: translate(121px, 121px);\r\n}\r\n\r\n.tile.tile-position-2-3 {\r\n    transform: translate(121px, 242px);\r\n}\r\n\r\n.tile.tile-position-2-4 {\r\n    transform: translate(121px, 363px);\r\n}\r\n\r\n.tile.tile-position-3-1 {\r\n    transform: translate(242px, 0px);\r\n}\r\n\r\n.tile.tile-position-3-2 {\r\n    transform: translate(242px, 121px);\r\n}\r\n\r\n.tile.tile-position-3-3 {\r\n    transform: translate(242px, 242px);\r\n}\r\n\r\n.tile.tile-position-3-4 {\r\n    transform: translate(242px, 363px);\r\n}\r\n\r\n.tile.tile-position-4-1 {\r\n    transform: translate(363px, 0px);\r\n}\r\n\r\n.tile.tile-position-4-2 {\r\n    transform: translate(363px, 121px);\r\n}\r\n\r\n.tile.tile-position-4-3 {\r\n    transform: translate(363px, 242px);\r\n}\r\n\r\n.tile.tile-position-4-4 {\r\n    transform: translate(363px, 363px);\r\n}\r\n\r\n.tile {\r\n    position: absolute;\r\n    transition: 100ms ease-in-out;\r\n    transition-property: transform;\r\n}\r\n\r\n.tile .tile-inner {\r\n    background: white;\r\n    color: rgb(0, 174, 239);\r\n    text-align: center;\r\n    font-weight: bold;\r\n    z-index: 10;\r\n    font-size: 55px;\r\n}\r\n\r\n.tile.tile-2 .tile-inner {\r\n    background: var(--tile-color);\r\n}\r\n\r\n.tile.tile-4 .tile-inner {\r\n    background: var(--tile-4-background);\r\n}\r\n\r\n.tile.tile-8 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-8-background);\r\n}\r\n\r\n.tile.tile-16 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-16-background);\r\n}\r\n\r\n.tile.tile-32 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-32-background);\r\n}\r\n\r\n.tile.tile-64 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-64-background);\r\n}\r\n\r\n.tile.tile-128 .tile-inner {\r\n    font-size: 45px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-128-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-128 .tile-inner {\r\n        font-size: 25px;\r\n    }\r\n}\r\n\r\n.tile.tile-256 .tile-inner {\r\n    font-size: 45px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-256-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-256 .tile-inner {\r\n        font-size: 25px;\r\n    }\r\n}\r\n\r\n.tile.tile-512 .tile-inner {\r\n    font-size: 45px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-512-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-512 .tile-inner {\r\n        font-size: 25px;\r\n    }\r\n}\r\n\r\n.tile.tile-1024 .tile-inner {\r\n    font-size: 35px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-1024-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-1024 .tile-inner {\r\n        font-size: 15px;\r\n    }\r\n}\r\n\r\n.tile.tile-2048 .tile-inner {\r\n    font-size: 35px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-2048-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-2048 .tile-inner {\r\n        font-size: 15px;\r\n    }\r\n}\r\n\r\n.tile.tile-super .tile-inner {\r\n    font-size: 30px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-super-backgroud);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-super .tile-inner {\r\n        font-size: 10px;\r\n    }\r\n}\r\n\r\n@-webkit-keyframes appear {\r\n    0% {\r\n        opacity: 0;\r\n        transform: scale(0);\r\n    }\r\n\r\n    100% {\r\n        opacity: 1;\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@keyframes appear {\r\n    0% {\r\n        opacity: 0;\r\n        transform: scale(0);\r\n    }\r\n\r\n    100% {\r\n        opacity: 1;\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n.tile-new .tile-inner {\r\n    -webkit-animation: appear 200ms ease 100ms;\r\n    animation: appear 200ms ease 100ms;\r\n    -webkit-animation-fill-mode: backwards;\r\n    animation-fill-mode: backwards;\r\n}\r\n\r\n@-webkit-keyframes pop {\r\n    0% {\r\n        transform: scale(0);\r\n    }\r\n\r\n    50% {\r\n        transform: scale(1.2);\r\n    }\r\n\r\n    100% {\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@keyframes pop {\r\n    0% {\r\n        transform: scale(0);\r\n    }\r\n\r\n    50% {\r\n        transform: scale(1.2);\r\n    }\r\n\r\n    100% {\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n.tile-merged .tile-inner {\r\n    z-index: 20;\r\n    -webkit-animation: pop 200ms ease 100ms;\r\n    animation: pop 200ms ease 100ms;\r\n    -webkit-animation-fill-mode: backwards;\r\n    animation-fill-mode: backwards;\r\n}\r\n\r\n.above-game {\r\n    display: block;\r\n    clear: right;\r\n    float: right;\r\n}\r\n\r\n.game-intro {\r\n    float: left;\r\n    line-height: 42px;\r\n    margin-bottom: 0;\r\n}\r\n\r\n.restart-button {\r\n    display: inline-block;\r\n    background: rgb(0, 113, 188);\r\n    padding: 5px 20px;\r\n    text-decoration: none;\r\n    color: white;\r\n    line-height: 45px;\r\n    text-align: center;\r\n}\r\n\r\n.game-explanation {\r\n    margin-top: 50px;\r\n}\r\n',"",{version:3,sources:["webpack://./src/css/game.css"],names:[],mappings:"AAAA;IACI,wBAAwB;IACxB,2BAA2B;IAC3B,cAAc;IACd,qBAAqB;IACrB,0BAA0B;IAC1B,iCAAiC;IACjC,qCAAqC;IACrC,sCAAsC;IACtC,sCAAsC;IACtC,sCAAsC;IACtC,yCAAyC;IACzC,uCAAuC;IACvC,uCAAuC;IACvC,yCAAyC;IACzC,wCAAwC;IACxC,gCAAgC;AACpC;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,wBAAwB;IACxB,8DAA8D;IAC9D,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,uBAAuB;IACvB,iBAAiB;IACjB,0BAA0B;IAC1B,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,gCAAgC;IAChC,gBAAgB;IAChB,mBAAmB;AACvB;;;AAGA;IACI,kBAAkB;IAClB,SAAS;IACT,QAAQ;IAER,gCAAgC;AACpC;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,WAAW;AACf;;AAEA;IACI,WAAW;IACX,gBAAgB;AACpB;;AAEA;;IAEI,kBAAkB;IAClB,qBAAqB;IACrB,4BAA4B;IAC5B,kBAAkB;IAClB,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,YAAY;IACZ,kBAAkB;AACtB;;AAEA;;IAEI,kBAAkB;IAClB,WAAW;IACX,SAAS;IACT,OAAO;IACP,yBAAyB;IACzB,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,eAAe;IACf,eAAe;IACf,2BAA2B;IAC3B,uBAAuB;IACvB,yBAAyB;IACzB,sBAAsB;IACtB,qBAAqB;IACrB,sBAAsB;IACtB,iBAAiB;IACjB,kBAAkB;IAClB,4BAA4B;IAC5B,mBAAmB;IACnB,oBAAoB;IACpB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;IACP,kCAAkC;IAClC,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,kCAAkC;IAClC,kBAAkB;IAClB,eAAe;IACf,qBAAqB;IACrB,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kCAAkC;IAClC,YAAY;AAChB;;AAEA;IACI,qBAAqB;CACxB;;AAED;;IAEI,cAAc;AAClB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,cAAc;IACd,WAAW;AACf;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,kBAAkB;IAClB,WAAW;IACX,qCAAqC;IACrC,kBAAkB;AACtB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IAII,8BAA8B;AAClC;;AAEA;IAII,gCAAgC;AACpC;;AAEA;IAII,gCAAgC;AACpC;;AAEA;IAII,gCAAgC;AACpC;;AAEA;IAII,gCAAgC;AACpC;;AAEA;IAII,kCAAkC;AACtC;;AAEA;IAII,kCAAkC;AACtC;;AAEA;IAII,kCAAkC;AACtC;;AAEA;IAII,gCAAgC;AACpC;;AAEA;IAII,kCAAkC;AACtC;;AAEA;IAII,kCAAkC;AACtC;;AAEA;IAII,kCAAkC;AACtC;;AAEA;IAII,gCAAgC;AACpC;;AAEA;IAII,kCAAkC;AACtC;;AAEA;IAII,kCAAkC;AACtC;;AAEA;IAII,kCAAkC;AACtC;;AAEA;IACI,kBAAkB;IAGlB,6BAA6B;IAG7B,8BAA8B;AAClC;;AAEA;IACI,iBAAiB;IACjB,uBAAuB;IACvB,kBAAkB;IAClB,iBAAiB;IACjB,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,wBAAwB;IACxB,oCAAoC;AACxC;;AAEA;IACI,wBAAwB;IACxB,qCAAqC;AACzC;;AAEA;IACI,wBAAwB;IACxB,qCAAqC;AACzC;;AAEA;IACI,wBAAwB;IACxB,qCAAqC;AACzC;;AAEA;IACI,eAAe;IACf,wBAAwB;IACxB,sCAAsC;AAC1C;;AAEA;IACI;QACI,eAAe;IACnB;AACJ;;AAEA;IACI,eAAe;IACf,wBAAwB;IACxB,sCAAsC;AAC1C;;AAEA;IACI;QACI,eAAe;IACnB;AACJ;;AAEA;IACI,eAAe;IACf,wBAAwB;IACxB,sCAAsC;AAC1C;;AAEA;IACI;QACI,eAAe;IACnB;AACJ;;AAEA;IACI,eAAe;IACf,wBAAwB;IACxB,uCAAuC;AAC3C;;AAEA;IACI;QACI,eAAe;IACnB;AACJ;;AAEA;IACI,eAAe;IACf,wBAAwB;IACxB,uCAAuC;AAC3C;;AAEA;IACI;QACI,eAAe;IACnB;AACJ;;AAEA;IACI,eAAe;IACf,wBAAwB;IACxB,uCAAuC;AAC3C;;AAEA;IACI;QACI,eAAe;IACnB;AACJ;;AAEA;IACI;QACI,UAAU;QAIV,mBAAmB;IACvB;;IAEA;QACI,UAAU;QAIV,mBAAmB;IACvB;AACJ;;AAoBA;IACI;QACI,UAAU;QAIV,mBAAmB;IACvB;;IAEA;QACI,UAAU;QAIV,mBAAmB;IACvB;AACJ;;AAEA;IACI,0CAA0C;IAE1C,kCAAkC;IAClC,sCAAsC;IAEtC,8BAA8B;AAClC;;AAEA;IACI;QAII,mBAAmB;IACvB;;IAEA;QAII,qBAAqB;IACzB;;IAEA;QAII,mBAAmB;IACvB;AACJ;;AAyBA;IACI;QAII,mBAAmB;IACvB;;IAEA;QAII,qBAAqB;IACzB;;IAEA;QAII,mBAAmB;IACvB;AACJ;;AAEA;IACI,WAAW;IACX,uCAAuC;IAEvC,+BAA+B;IAC/B,sCAAsC;IAEtC,8BAA8B;AAClC;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,4BAA4B;IAC5B,iBAAiB;IACjB,qBAAqB;IACrB,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:[':root {\r\n    --blue: rgb(0, 113, 188);\r\n    --white: rgb(248, 248, 248);\r\n    --width: 475px;\r\n    --heigh: var(--width);\r\n    --tile-color: var(--white);\r\n    --tile-4-background: var(--white);\r\n    --tile-8-background: rgb(0, 174, 239);;\r\n    --tile-16-background: rgb(145, 0, 145);\r\n    --tile-32-background: rgb(255, 138, 0);\r\n    --tile-64-background: rgb(140, 198, 0);\r\n    --tile-128-background: rgb(121, 122, 223);\r\n    --tile-256-background: rgb(86, 65, 132);\r\n    --tile-512-background:  rgb(23, 35, 61);\r\n    --tile-1024-background: rgb(255, 121, 25);\r\n    --tile-2048-background:  rgb(200, 83, 0);\r\n    --tile-super-backgroud:  #38362f;\r\n}\r\n\r\nhtml, body {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nbody {\r\n    color: var(--blue);\r\n    background: var(--white);\r\n    font-family: "Clear Sans", "Helvetica Neue", Arial, sans-serif;\r\n    font-size: 18px;\r\n}\r\n\r\np {\r\n    margin-top: 0;\r\n    margin-bottom: 10px;\r\n    line-height: 1.65;\r\n}\r\n\r\na {\r\n    color: rgb(0, 113, 188);\r\n    font-weight: bold;\r\n    text-decoration: underline;\r\n    cursor: pointer;\r\n}\r\n\r\nhr {\r\n    border: none;\r\n    border-bottom: 1px solid #d8d4d0;\r\n    margin-top: 20px;\r\n    margin-bottom: 30px;\r\n}\r\n\r\n\r\n.container {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.footer {\r\n    text-align: center;\r\n}\r\n\r\n.heading:after {\r\n    content: "";\r\n    display: block;\r\n    clear: both;\r\n}\r\n\r\n.scores-container {\r\n    float: left;\r\n    text-align: left;\r\n}\r\n\r\n.score-container,\r\n.best-container {\r\n    position: relative;\r\n    display: inline-block;\r\n    background: rgb(0, 113, 188);\r\n    padding: 15px 25px;\r\n    font-size: 25px;\r\n    height: 25px;\r\n    line-height: 47px;\r\n    font-weight: bold;\r\n    color: white;\r\n    text-align: center;\r\n}\r\n\r\n.score-container:after,\r\n.best-container:after {\r\n    position: absolute;\r\n    width: 100%;\r\n    top: 10px;\r\n    left: 0;\r\n    text-transform: uppercase;\r\n    font-size: 13px;\r\n    line-height: 13px;\r\n    text-align: center;\r\n    color: white;\r\n}\r\n\r\n.score-container:after {\r\n    content: "Резултат";\r\n}\r\n\r\n.best-container:after {\r\n    content: "Рекорд";\r\n}\r\n\r\n.important {\r\n    text-transform: uppercase;\r\n}\r\n\r\n.game-container {\r\n    margin-top: 1em;\r\n    padding: 0.85em;\r\n    cursor: default;\r\n    -webkit-touch-callout: none;\r\n    -ms-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    -ms-touch-action: none;\r\n    user-select: none;\r\n    touch-action: none;\r\n    background: rgb(0, 113, 188);\r\n    width: var(--width);\r\n    height: var(--heigh);\r\n    border-radius: 3.5rem;    \r\n}\r\n\r\n.game-container .game-message {\r\n    display: none;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background: rgba(0, 174, 239, 0.5);\r\n    z-index: 100;\r\n    text-align: center;\r\n}\r\n\r\n.game-container .game-message p {\r\n    font-size: 60px;\r\n    font-weight: bold;\r\n    height: 60px;\r\n    color: white;\r\n    line-height: 60px;\r\n    margin-top: 222px;\r\n}\r\n\r\n.game-container .game-message .lower {\r\n    display: block;\r\n    margin-top: 59px;\r\n}\r\n\r\n.game-container .game-message a {\r\n    display: inline-block;\r\n    background: rgba(58, 90, 155, 0.5);\r\n    border-radius: 3px;\r\n    padding: 0 20px;\r\n    text-decoration: none;\r\n    color: white;\r\n    height: 40px;\r\n    line-height: 42px;\r\n    margin-left: 9px;\r\n}\r\n\r\n.game-container .game-message a.keep-playing-button {\r\n    display: none;\r\n}\r\n\r\n.game-container .game-message.game-won {\r\n    background: rgba(58, 90, 155, 0.5);\r\n    color: white;\r\n}\r\n\r\n.game-container .game-message.game-won a.keep-playing-button {\r\n    display: inline-block;\r\n }\r\n\r\n.game-container .game-message.game-won,\r\n.game-container .game-message.game-over {\r\n    display: block;\r\n}\r\n\r\n.grid-container {\r\n    position: absolute;\r\n}\r\n\r\n.grid-row {\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.grid-row:last-child {\r\n    margin-bottom: 0;\r\n}\r\n\r\n.grid-row:after {\r\n    content: "";\r\n    display: block;\r\n    clear: both;\r\n}\r\n\r\n.grid-cell {\r\n    width: 106.25px;\r\n    height: 106.25px;\r\n    margin-right: 15px;\r\n    float: left;\r\n    background: rgba(244, 216, 115, 0.25);\r\n    border-radius: 50%;\r\n}\r\n\r\n.grid-cell:last-child {\r\n    margin-right: 0;\r\n}\r\n\r\n.tile, .tile .tile-inner {\r\n    width: 107px;\r\n    height: 107px;\r\n    line-height: 107px;\r\n    border-radius: 50%;\r\n}\r\n\r\n.tile.tile-position-1-1 {\r\n    -webkit-transform: translate(0px, 0px);\r\n    -moz-transform: translate(0px, 0px);\r\n    -ms-transform: translate(0px, 0px);\r\n    transform: translate(0px, 0px);\r\n}\r\n\r\n.tile.tile-position-1-2 {\r\n    -webkit-transform: translate(0px, 121px);\r\n    -moz-transform: translate(0px, 121px);\r\n    -ms-transform: translate(0px, 121px);\r\n    transform: translate(0px, 121px);\r\n}\r\n\r\n.tile.tile-position-1-3 {\r\n    -webkit-transform: translate(0px, 242px);\r\n    -moz-transform: translate(0px, 242px);\r\n    -ms-transform: translate(0px, 242px);\r\n    transform: translate(0px, 242px);\r\n}\r\n\r\n.tile.tile-position-1-4 {\r\n    -webkit-transform: translate(0px, 363px);\r\n    -moz-transform: translate(0px, 363px);\r\n    -ms-transform: translate(0px, 363px);\r\n    transform: translate(0px, 363px);\r\n}\r\n\r\n.tile.tile-position-2-1 {\r\n    -webkit-transform: translate(121px, 0px);\r\n    -moz-transform: translate(121px, 0px);\r\n    -ms-transform: translate(121px, 0px);\r\n    transform: translate(121px, 0px);\r\n}\r\n\r\n.tile.tile-position-2-2 {\r\n    -webkit-transform: translate(121px, 121px);\r\n    -moz-transform: translate(121px, 121px);\r\n    -ms-transform: translate(121px, 121px);\r\n    transform: translate(121px, 121px);\r\n}\r\n\r\n.tile.tile-position-2-3 {\r\n    -webkit-transform: translate(121px, 242px);\r\n    -moz-transform: translate(121px, 242px);\r\n    -ms-transform: translate(121px, 242px);\r\n    transform: translate(121px, 242px);\r\n}\r\n\r\n.tile.tile-position-2-4 {\r\n    -webkit-transform: translate(121px, 363px);\r\n    -moz-transform: translate(121px, 363px);\r\n    -ms-transform: translate(121px, 363px);\r\n    transform: translate(121px, 363px);\r\n}\r\n\r\n.tile.tile-position-3-1 {\r\n    -webkit-transform: translate(242px, 0px);\r\n    -moz-transform: translate(242px, 0px);\r\n    -ms-transform: translate(242px, 0px);\r\n    transform: translate(242px, 0px);\r\n}\r\n\r\n.tile.tile-position-3-2 {\r\n    -webkit-transform: translate(242px, 121px);\r\n    -moz-transform: translate(242px, 121px);\r\n    -ms-transform: translate(242px, 121px);\r\n    transform: translate(242px, 121px);\r\n}\r\n\r\n.tile.tile-position-3-3 {\r\n    -webkit-transform: translate(242px, 242px);\r\n    -moz-transform: translate(242px, 242px);\r\n    -ms-transform: translate(242px, 242px);\r\n    transform: translate(242px, 242px);\r\n}\r\n\r\n.tile.tile-position-3-4 {\r\n    -webkit-transform: translate(242px, 363px);\r\n    -moz-transform: translate(242px, 363px);\r\n    -ms-transform: translate(242px, 363px);\r\n    transform: translate(242px, 363px);\r\n}\r\n\r\n.tile.tile-position-4-1 {\r\n    -webkit-transform: translate(363px, 0px);\r\n    -moz-transform: translate(363px, 0px);\r\n    -ms-transform: translate(363px, 0px);\r\n    transform: translate(363px, 0px);\r\n}\r\n\r\n.tile.tile-position-4-2 {\r\n    -webkit-transform: translate(363px, 121px);\r\n    -moz-transform: translate(363px, 121px);\r\n    -ms-transform: translate(363px, 121px);\r\n    transform: translate(363px, 121px);\r\n}\r\n\r\n.tile.tile-position-4-3 {\r\n    -webkit-transform: translate(363px, 242px);\r\n    -moz-transform: translate(363px, 242px);\r\n    -ms-transform: translate(363px, 242px);\r\n    transform: translate(363px, 242px);\r\n}\r\n\r\n.tile.tile-position-4-4 {\r\n    -webkit-transform: translate(363px, 363px);\r\n    -moz-transform: translate(363px, 363px);\r\n    -ms-transform: translate(363px, 363px);\r\n    transform: translate(363px, 363px);\r\n}\r\n\r\n.tile {\r\n    position: absolute;\r\n    -webkit-transition: 100ms ease-in-out;\r\n    -moz-transition: 100ms ease-in-out;\r\n    transition: 100ms ease-in-out;\r\n    -webkit-transition-property: -webkit-transform;\r\n    -moz-transition-property: -moz-transform;\r\n    transition-property: transform;\r\n}\r\n\r\n.tile .tile-inner {\r\n    background: white;\r\n    color: rgb(0, 174, 239);\r\n    text-align: center;\r\n    font-weight: bold;\r\n    z-index: 10;\r\n    font-size: 55px;\r\n}\r\n\r\n.tile.tile-2 .tile-inner {\r\n    background: var(--tile-color);\r\n}\r\n\r\n.tile.tile-4 .tile-inner {\r\n    background: var(--tile-4-background);\r\n}\r\n\r\n.tile.tile-8 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-8-background);\r\n}\r\n\r\n.tile.tile-16 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-16-background);\r\n}\r\n\r\n.tile.tile-32 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-32-background);\r\n}\r\n\r\n.tile.tile-64 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-64-background);\r\n}\r\n\r\n.tile.tile-128 .tile-inner {\r\n    font-size: 45px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-128-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-128 .tile-inner {\r\n        font-size: 25px;\r\n    }\r\n}\r\n\r\n.tile.tile-256 .tile-inner {\r\n    font-size: 45px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-256-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-256 .tile-inner {\r\n        font-size: 25px;\r\n    }\r\n}\r\n\r\n.tile.tile-512 .tile-inner {\r\n    font-size: 45px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-512-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-512 .tile-inner {\r\n        font-size: 25px;\r\n    }\r\n}\r\n\r\n.tile.tile-1024 .tile-inner {\r\n    font-size: 35px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-1024-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-1024 .tile-inner {\r\n        font-size: 15px;\r\n    }\r\n}\r\n\r\n.tile.tile-2048 .tile-inner {\r\n    font-size: 35px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-2048-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-2048 .tile-inner {\r\n        font-size: 15px;\r\n    }\r\n}\r\n\r\n.tile.tile-super .tile-inner {\r\n    font-size: 30px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-super-backgroud);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-super .tile-inner {\r\n        font-size: 10px;\r\n    }\r\n}\r\n\r\n@-webkit-keyframes appear {\r\n    0% {\r\n        opacity: 0;\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    100% {\r\n        opacity: 1;\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@-moz-keyframes appear {\r\n    0% {\r\n        opacity: 0;\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    100% {\r\n        opacity: 1;\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@keyframes appear {\r\n    0% {\r\n        opacity: 0;\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    100% {\r\n        opacity: 1;\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n.tile-new .tile-inner {\r\n    -webkit-animation: appear 200ms ease 100ms;\r\n    -moz-animation: appear 200ms ease 100ms;\r\n    animation: appear 200ms ease 100ms;\r\n    -webkit-animation-fill-mode: backwards;\r\n    -moz-animation-fill-mode: backwards;\r\n    animation-fill-mode: backwards;\r\n}\r\n\r\n@-webkit-keyframes pop {\r\n    0% {\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    50% {\r\n        -webkit-transform: scale(1.2);\r\n        -moz-transform: scale(1.2);\r\n        -ms-transform: scale(1.2);\r\n        transform: scale(1.2);\r\n    }\r\n\r\n    100% {\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@-moz-keyframes pop {\r\n    0% {\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    50% {\r\n        -webkit-transform: scale(1.2);\r\n        -moz-transform: scale(1.2);\r\n        -ms-transform: scale(1.2);\r\n        transform: scale(1.2);\r\n    }\r\n\r\n    100% {\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@keyframes pop {\r\n    0% {\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    50% {\r\n        -webkit-transform: scale(1.2);\r\n        -moz-transform: scale(1.2);\r\n        -ms-transform: scale(1.2);\r\n        transform: scale(1.2);\r\n    }\r\n\r\n    100% {\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n.tile-merged .tile-inner {\r\n    z-index: 20;\r\n    -webkit-animation: pop 200ms ease 100ms;\r\n    -moz-animation: pop 200ms ease 100ms;\r\n    animation: pop 200ms ease 100ms;\r\n    -webkit-animation-fill-mode: backwards;\r\n    -moz-animation-fill-mode: backwards;\r\n    animation-fill-mode: backwards;\r\n}\r\n\r\n.above-game {\r\n    display: block;\r\n    clear: right;\r\n    float: right;\r\n}\r\n\r\n.game-intro {\r\n    float: left;\r\n    line-height: 42px;\r\n    margin-bottom: 0;\r\n}\r\n\r\n.restart-button {\r\n    display: inline-block;\r\n    background: rgb(0, 113, 188);\r\n    padding: 5px 20px;\r\n    text-decoration: none;\r\n    color: white;\r\n    line-height: 45px;\r\n    text-align: center;\r\n}\r\n\r\n.game-explanation {\r\n    margin-top: 50px;\r\n}\r\n'],sourceRoot:""}]);const s=a},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);r&&i[l[0]]||(e&&(l[2]?l[2]="".concat(e," and ").concat(l[2]):l[2]=e),t.push(l))}},t}},15:n=>{"use strict";function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e,r,i=(r=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=e){var r,i,o=[],a=!0,s=!1;try{for(e=e.call(n);!(a=(r=e.next()).done)&&(o.push(r.value),!t||o.length!==t);a=!0);}catch(n){s=!0,i=n}finally{try{a||null==e.return||e.return()}finally{if(s)throw i}}return o}}(e,r)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if(!a)return o;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(l," */"),u=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[o].concat(u).concat([c]).join("\n")}return[o].join("\n")}},934:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tagProperty=t.tagParameter=t.decorate=void 0;var r=e(674),i=e(867);function o(n,t,e,i,o){var a={},s="number"==typeof o,l=void 0!==o&&s?o.toString():e;if(s&&void 0!==e)throw new Error(r.INVALID_DECORATOR_OPERATION);Reflect.hasOwnMetadata(n,t)&&(a=Reflect.getMetadata(n,t));var c=a[l];if(Array.isArray(c))for(var u=0,A=c;u<A.length;u++){var p=A[u];if(p.key===i.key)throw new Error(r.DUPLICATED_METADATA+" "+p.key.toString())}else c=[];c.push(i),a[l]=c,Reflect.defineMetadata(n,a,t)}function a(n,t){Reflect.decorate(n,t)}function s(n,t){return function(e,r){t(e,r,n)}}t.tagParameter=function(n,t,e,r){o(i.TAGGED,n,t,r,e)},t.tagProperty=function(n,t,e){o(i.TAGGED_PROP,n.constructor,t,e)},t.decorate=function(n,t,e){"number"==typeof e?a([s(e,n)],t):"string"==typeof e?Reflect.decorate([n],t,e):a([n],t)}},744:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inject=t.LazyServiceIdentifer=void 0;var r=e(674),i=e(867),o=e(738),a=e(934),s=function(){function n(n){this._cb=n}return n.prototype.unwrap=function(){return this._cb()},n}();t.LazyServiceIdentifer=s,t.inject=function(n){return function(t,e,s){if(void 0===n)throw new Error(r.UNDEFINED_INJECT_ANNOTATION(t.name));var l=new o.Metadata(i.INJECT_TAG,n);"number"==typeof s?a.tagParameter(t,e,s,l):a.tagProperty(t,e,l)}}},315:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.injectable=void 0;var r=e(674),i=e(867);t.injectable=function(){return function(n){if(Reflect.hasOwnMetadata(i.PARAM_TYPES,n))throw new Error(r.DUPLICATED_INJECTABLE_DECORATOR);var t=Reflect.getMetadata(i.DESIGN_PARAM_TYPES,n)||[];return Reflect.defineMetadata(i.PARAM_TYPES,t,n),n}}},693:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiInject=void 0;var r=e(867),i=e(738),o=e(934);t.multiInject=function(n){return function(t,e,a){var s=new i.Metadata(r.MULTI_INJECT_TAG,n);"number"==typeof a?o.tagParameter(t,e,a,s):o.tagProperty(t,e,s)}}},85:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.named=void 0;var r=e(867),i=e(738),o=e(934);t.named=function(n){return function(t,e,a){var s=new i.Metadata(r.NAMED_TAG,n);"number"==typeof a?o.tagParameter(t,e,a,s):o.tagProperty(t,e,s)}}},515:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.optional=void 0;var r=e(867),i=e(738),o=e(934);t.optional=function(){return function(n,t,e){var a=new i.Metadata(r.OPTIONAL_TAG,!0);"number"==typeof e?o.tagParameter(n,t,e,a):o.tagProperty(n,t,a)}}},14:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.postConstruct=void 0;var r=e(674),i=e(867),o=e(738);t.postConstruct=function(){return function(n,t,e){var a=new o.Metadata(i.POST_CONSTRUCT,t);if(Reflect.hasOwnMetadata(i.POST_CONSTRUCT,n.constructor))throw new Error(r.MULTIPLE_POST_CONSTRUCT_METHODS);Reflect.defineMetadata(i.POST_CONSTRUCT,a,n.constructor)}}},52:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tagged=void 0;var r=e(738),i=e(934);t.tagged=function(n,t){return function(e,o,a){var s=new r.Metadata(n,t);"number"==typeof a?i.tagParameter(e,o,a,s):i.tagProperty(e,o,s)}}},638:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.targetName=void 0;var r=e(867),i=e(738),o=e(934);t.targetName=function(n){return function(t,e,a){var s=new i.Metadata(r.NAME_TAG,n);o.tagParameter(t,e,a,s)}}},757:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unmanaged=void 0;var r=e(867),i=e(738),o=e(934);t.unmanaged=function(){return function(n,t,e){var a=new i.Metadata(r.UNMANAGED_TAG,!0);o.tagParameter(n,t,e,a)}}},290:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Binding=void 0;var r=e(421),i=e(791),o=function(){function n(n,t){this.id=i.id(),this.activated=!1,this.serviceIdentifier=n,this.scope=t,this.type=r.BindingTypeEnum.Invalid,this.constraint=function(n){return!0},this.implementationType=null,this.cache=null,this.factory=null,this.provider=null,this.onActivation=null,this.dynamicValue=null}return n.prototype.clone=function(){var t=new n(this.serviceIdentifier,this.scope);return t.activated=t.scope===r.BindingScopeEnum.Singleton&&this.activated,t.implementationType=this.implementationType,t.dynamicValue=this.dynamicValue,t.scope=this.scope,t.type=this.type,t.factory=this.factory,t.provider=this.provider,t.constraint=this.constraint,t.onActivation=this.onActivation,t.cache=this.cache,t},n}();t.Binding=o},184:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingCount=void 0,t.BindingCount={MultipleBindingsAvailable:2,NoBindingsAvailable:0,OnlyOneBindingAvailable:1}},674:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.STACK_OVERFLOW=t.CIRCULAR_DEPENDENCY_IN_FACTORY=t.POST_CONSTRUCT_ERROR=t.MULTIPLE_POST_CONSTRUCT_METHODS=t.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK=t.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE=t.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE=t.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT=t.ARGUMENTS_LENGTH_MISMATCH=t.INVALID_DECORATOR_OPERATION=t.INVALID_TO_SELF_VALUE=t.INVALID_FUNCTION_BINDING=t.INVALID_MIDDLEWARE_RETURN=t.NO_MORE_SNAPSHOTS_AVAILABLE=t.INVALID_BINDING_TYPE=t.NOT_IMPLEMENTED=t.CIRCULAR_DEPENDENCY=t.UNDEFINED_INJECT_ANNOTATION=t.MISSING_INJECT_ANNOTATION=t.MISSING_INJECTABLE_ANNOTATION=t.NOT_REGISTERED=t.CANNOT_UNBIND=t.AMBIGUOUS_MATCH=t.KEY_NOT_FOUND=t.NULL_ARGUMENT=t.DUPLICATED_METADATA=t.DUPLICATED_INJECTABLE_DECORATOR=void 0,t.DUPLICATED_INJECTABLE_DECORATOR="Cannot apply @injectable decorator multiple times.",t.DUPLICATED_METADATA="Metadata key was used more than once in a parameter:",t.NULL_ARGUMENT="NULL argument",t.KEY_NOT_FOUND="Key Not Found",t.AMBIGUOUS_MATCH="Ambiguous match found for serviceIdentifier:",t.CANNOT_UNBIND="Could not unbind serviceIdentifier:",t.NOT_REGISTERED="No matching bindings found for serviceIdentifier:",t.MISSING_INJECTABLE_ANNOTATION="Missing required @injectable annotation in:",t.MISSING_INJECT_ANNOTATION="Missing required @inject or @multiInject annotation in:",t.UNDEFINED_INJECT_ANNOTATION=function(n){return"@inject called with undefined this could mean that the class "+n+" has a circular dependency problem. You can use a LazyServiceIdentifer to  overcome this limitation."},t.CIRCULAR_DEPENDENCY="Circular dependency found:",t.NOT_IMPLEMENTED="Sorry, this feature is not fully implemented yet.",t.INVALID_BINDING_TYPE="Invalid binding type:",t.NO_MORE_SNAPSHOTS_AVAILABLE="No snapshot available to restore.",t.INVALID_MIDDLEWARE_RETURN="Invalid return type in middleware. Middleware must return!",t.INVALID_FUNCTION_BINDING="Value provided to function binding must be a function!",t.INVALID_TO_SELF_VALUE="The toSelf function can only be applied when a constructor is used as service identifier",t.INVALID_DECORATOR_OPERATION="The @inject @multiInject @tagged and @named decorators must be applied to the parameters of a class constructor or a class property.",t.ARGUMENTS_LENGTH_MISMATCH=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return"The number of constructor arguments in the derived class "+n[0]+" must be >= than the number of constructor arguments of its base class."},t.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT="Invalid Container constructor argument. Container options must be an object.",t.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE="Invalid Container option. Default scope must be a string ('singleton' or 'transient').",t.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE="Invalid Container option. Auto bind injectable must be a boolean",t.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK="Invalid Container option. Skip base check must be a boolean",t.MULTIPLE_POST_CONSTRUCT_METHODS="Cannot apply @postConstruct decorator multiple times in the same class",t.POST_CONSTRUCT_ERROR=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return"@postConstruct error in class "+n[0]+": "+n[1]},t.CIRCULAR_DEPENDENCY_IN_FACTORY=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return"It looks like there is a circular dependency in one of the '"+n[0]+"' bindings. Please investigate bindings withservice identifier '"+n[1]+"'."},t.STACK_OVERFLOW="Maximum call stack size exceeded"},421:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TargetTypeEnum=t.BindingTypeEnum=t.BindingScopeEnum=void 0,t.BindingScopeEnum={Request:"Request",Singleton:"Singleton",Transient:"Transient"},t.BindingTypeEnum={ConstantValue:"ConstantValue",Constructor:"Constructor",DynamicValue:"DynamicValue",Factory:"Factory",Function:"Function",Instance:"Instance",Invalid:"Invalid",Provider:"Provider"},t.TargetTypeEnum={ClassProperty:"ClassProperty",ConstructorArgument:"ConstructorArgument",Variable:"Variable"}},867:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NON_CUSTOM_TAG_KEYS=t.POST_CONSTRUCT=t.DESIGN_PARAM_TYPES=t.PARAM_TYPES=t.TAGGED_PROP=t.TAGGED=t.MULTI_INJECT_TAG=t.INJECT_TAG=t.OPTIONAL_TAG=t.UNMANAGED_TAG=t.NAME_TAG=t.NAMED_TAG=void 0,t.NAMED_TAG="named",t.NAME_TAG="name",t.UNMANAGED_TAG="unmanaged",t.OPTIONAL_TAG="optional",t.INJECT_TAG="inject",t.MULTI_INJECT_TAG="multi_inject",t.TAGGED="inversify:tagged",t.TAGGED_PROP="inversify:tagged_props",t.PARAM_TYPES="inversify:paramtypes",t.DESIGN_PARAM_TYPES="design:paramtypes",t.POST_CONSTRUCT="post_construct",t.NON_CUSTOM_TAG_KEYS=[t.INJECT_TAG,t.MULTI_INJECT_TAG,t.NAME_TAG,t.UNMANAGED_TAG,t.NAMED_TAG,t.OPTIONAL_TAG]},389:function(n,t,e){"use strict";var r=this&&this.__awaiter||function(n,t,e,r){return new(e||(e=Promise))((function(i,o){function a(n){try{l(r.next(n))}catch(n){o(n)}}function s(n){try{l(r.throw(n))}catch(n){o(n)}}function l(n){var t;n.done?i(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(a,s)}l((r=r.apply(n,t||[])).next())}))},i=this&&this.__generator||function(n,t){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(n,a)}catch(n){o=[6,n],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=this&&this.__spreadArray||function(n,t){for(var e=0,r=t.length,i=n.length;e<r;e++,i++)n[i]=t[e];return n};Object.defineProperty(t,"__esModule",{value:!0}),t.Container=void 0;var a=e(290),s=e(674),l=e(421),c=e(867),u=e(377),A=e(311),p=e(927),d=e(860),f=e(791),g=e(800),h=e(13),m=e(175),C=function(){function n(n){this._appliedMiddleware=[];var t=n||{};if("object"!=typeof t)throw new Error(""+s.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);if(void 0===t.defaultScope)t.defaultScope=l.BindingScopeEnum.Transient;else if(t.defaultScope!==l.BindingScopeEnum.Singleton&&t.defaultScope!==l.BindingScopeEnum.Transient&&t.defaultScope!==l.BindingScopeEnum.Request)throw new Error(""+s.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);if(void 0===t.autoBindInjectable)t.autoBindInjectable=!1;else if("boolean"!=typeof t.autoBindInjectable)throw new Error(""+s.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);if(void 0===t.skipBaseClassChecks)t.skipBaseClassChecks=!1;else if("boolean"!=typeof t.skipBaseClassChecks)throw new Error(""+s.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);this.options={autoBindInjectable:t.autoBindInjectable,defaultScope:t.defaultScope,skipBaseClassChecks:t.skipBaseClassChecks},this.id=f.id(),this._bindingDictionary=new m.Lookup,this._snapshots=[],this._middleware=null,this.parent=null,this._metadataReader=new u.MetadataReader}return n.merge=function(t,e){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];var a=new n,s=o([t,e],r).map((function(n){return A.getBindingDictionary(n)})),l=A.getBindingDictionary(a);function c(n,t){n.traverse((function(n,e){e.forEach((function(n){t.add(n.serviceIdentifier,n.clone())}))}))}return s.forEach((function(n){c(n,l)})),a},n.prototype.load=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];for(var e=this._getContainerModuleHelpersFactory(),r=0,i=n;r<i.length;r++){var o=i[r],a=e(o.id);o.registry(a.bindFunction,a.unbindFunction,a.isboundFunction,a.rebindFunction)}},n.prototype.loadAsync=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return r(this,void 0,void 0,(function(){var t,e,r,o,a;return i(this,(function(i){switch(i.label){case 0:t=this._getContainerModuleHelpersFactory(),e=0,r=n,i.label=1;case 1:return e<r.length?(o=r[e],a=t(o.id),[4,o.registry(a.bindFunction,a.unbindFunction,a.isboundFunction,a.rebindFunction)]):[3,4];case 2:i.sent(),i.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},n.prototype.unload=function(){for(var n=this,t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=function(n){return function(t){return t.moduleId===n}};t.forEach((function(t){var e=r(t.id);n._bindingDictionary.removeByCondition(e)}))},n.prototype.bind=function(n){var t=this.options.defaultScope||l.BindingScopeEnum.Transient,e=new a.Binding(n,t);return this._bindingDictionary.add(n,e),new d.BindingToSyntax(e)},n.prototype.rebind=function(n){return this.unbind(n),this.bind(n)},n.prototype.unbind=function(n){try{this._bindingDictionary.remove(n)}catch(t){throw new Error(s.CANNOT_UNBIND+" "+g.getServiceIdentifierAsString(n))}},n.prototype.unbindAll=function(){this._bindingDictionary=new m.Lookup},n.prototype.isBound=function(n){var t=this._bindingDictionary.hasKey(n);return!t&&this.parent&&(t=this.parent.isBound(n)),t},n.prototype.isBoundNamed=function(n,t){return this.isBoundTagged(n,c.NAMED_TAG,t)},n.prototype.isBoundTagged=function(n,t,e){var r=!1;if(this._bindingDictionary.hasKey(n)){var i=this._bindingDictionary.get(n),o=A.createMockRequest(this,n,t,e);r=i.some((function(n){return n.constraint(o)}))}return!r&&this.parent&&(r=this.parent.isBoundTagged(n,t,e)),r},n.prototype.snapshot=function(){this._snapshots.push(h.ContainerSnapshot.of(this._bindingDictionary.clone(),this._middleware))},n.prototype.restore=function(){var n=this._snapshots.pop();if(void 0===n)throw new Error(s.NO_MORE_SNAPSHOTS_AVAILABLE);this._bindingDictionary=n.bindings,this._middleware=n.middleware},n.prototype.createChild=function(t){var e=new n(t||this.options);return e.parent=this,e},n.prototype.applyMiddleware=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];this._appliedMiddleware=this._appliedMiddleware.concat(n);var e=this._middleware?this._middleware:this._planAndResolve();this._middleware=n.reduce((function(n,t){return t(n)}),e)},n.prototype.applyCustomMetadataReader=function(n){this._metadataReader=n},n.prototype.get=function(n){return this._get(!1,!1,l.TargetTypeEnum.Variable,n)},n.prototype.getTagged=function(n,t,e){return this._get(!1,!1,l.TargetTypeEnum.Variable,n,t,e)},n.prototype.getNamed=function(n,t){return this.getTagged(n,c.NAMED_TAG,t)},n.prototype.getAll=function(n){return this._get(!0,!0,l.TargetTypeEnum.Variable,n)},n.prototype.getAllTagged=function(n,t,e){return this._get(!1,!0,l.TargetTypeEnum.Variable,n,t,e)},n.prototype.getAllNamed=function(n,t){return this.getAllTagged(n,c.NAMED_TAG,t)},n.prototype.resolve=function(n){var t=this.createChild();return t.bind(n).toSelf(),this._appliedMiddleware.forEach((function(n){t.applyMiddleware(n)})),t.get(n)},n.prototype._getContainerModuleHelpersFactory=function(){var n=this,t=function(n,t){n._binding.moduleId=t},e=function(e){return function(r){var i=n.rebind.bind(n)(r);return t(i,e),i}};return function(r){return{bindFunction:(i=r,function(e){var r=n.bind.bind(n)(e);return t(r,i),r}),isboundFunction:function(t){return n.isBound.bind(n)(t)},rebindFunction:e(r),unbindFunction:function(t){n.unbind.bind(n)(t)}};var i}},n.prototype._get=function(n,t,e,r,i,o){var a=null,l={avoidConstraints:n,contextInterceptor:function(n){return n},isMultiInject:t,key:i,serviceIdentifier:r,targetType:e,value:o};if(this._middleware){if(null==(a=this._middleware(l)))throw new Error(s.INVALID_MIDDLEWARE_RETURN)}else a=this._planAndResolve()(l);return a},n.prototype._planAndResolve=function(){var n=this;return function(t){var e=A.plan(n._metadataReader,n,t.isMultiInject,t.targetType,t.serviceIdentifier,t.key,t.value,t.avoidConstraints);return e=t.contextInterceptor(e),p.resolve(e)}},n}();t.Container=C},244:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncContainerModule=t.ContainerModule=void 0;var r=e(791);t.ContainerModule=function(n){this.id=r.id(),this.registry=n};t.AsyncContainerModule=function(n){this.id=r.id(),this.registry=n}},13:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ContainerSnapshot=void 0;var e=function(){function n(){}return n.of=function(t,e){var r=new n;return r.bindings=t,r.middleware=e,r},n}();t.ContainerSnapshot=e},175:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Lookup=void 0;var r=e(674),i=function(){function n(){this._map=new Map}return n.prototype.getMap=function(){return this._map},n.prototype.add=function(n,t){if(null==n)throw new Error(r.NULL_ARGUMENT);if(null==t)throw new Error(r.NULL_ARGUMENT);var e=this._map.get(n);void 0!==e?(e.push(t),this._map.set(n,e)):this._map.set(n,[t])},n.prototype.get=function(n){if(null==n)throw new Error(r.NULL_ARGUMENT);var t=this._map.get(n);if(void 0!==t)return t;throw new Error(r.KEY_NOT_FOUND)},n.prototype.remove=function(n){if(null==n)throw new Error(r.NULL_ARGUMENT);if(!this._map.delete(n))throw new Error(r.KEY_NOT_FOUND)},n.prototype.removeByCondition=function(n){var t=this;this._map.forEach((function(e,r){var i=e.filter((function(t){return!n(t)}));i.length>0?t._map.set(r,i):t._map.delete(r)}))},n.prototype.hasKey=function(n){if(null==n)throw new Error(r.NULL_ARGUMENT);return this._map.has(n)},n.prototype.clone=function(){var t=new n;return this._map.forEach((function(n,e){n.forEach((function(n){return t.add(e,n.clone())}))})),t},n.prototype.traverse=function(n){this._map.forEach((function(t,e){n(e,t)}))},n}();t.Lookup=i},700:(n,t,e)=>{"use strict";t.f3=t.b2=t.W2=void 0,e(867);var r=e(389);Object.defineProperty(t,"W2",{enumerable:!0,get:function(){return r.Container}});e(421),e(244);var i=e(315);Object.defineProperty(t,"b2",{enumerable:!0,get:function(){return i.injectable}});e(52),e(85);var o=e(744);Object.defineProperty(t,"f3",{enumerable:!0,get:function(){return o.inject}});e(515),e(757),e(693),e(638),e(14),e(377),e(791),e(934),e(758),e(800),e(600)},228:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Context=void 0;var r=e(791),i=function(){function n(n){this.id=r.id(),this.container=n}return n.prototype.addPlan=function(n){this.plan=n},n.prototype.setCurrentRequest=function(n){this.currentRequest=n},n}();t.Context=i},738:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Metadata=void 0;var r=e(867),i=function(){function n(n,t){this.key=n,this.value=t}return n.prototype.toString=function(){return this.key===r.NAMED_TAG?"named: "+this.value.toString()+" ":"tagged: { key:"+this.key.toString()+", value: "+this.value+" }"},n}();t.Metadata=i},377:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MetadataReader=void 0;var r=e(867),i=function(){function n(){}return n.prototype.getConstructorMetadata=function(n){return{compilerGeneratedMetadata:Reflect.getMetadata(r.PARAM_TYPES,n),userGeneratedMetadata:Reflect.getMetadata(r.TAGGED,n)||{}}},n.prototype.getPropertiesMetadata=function(n){return Reflect.getMetadata(r.TAGGED_PROP,n)||[]},n}();t.MetadataReader=i},314:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Plan=void 0;t.Plan=function(n,t){this.parentContext=n,this.rootRequest=t}},311:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingDictionary=t.createMockRequest=t.plan=void 0;var r=e(184),i=e(674),o=e(421),a=e(867),s=e(265),l=e(800),c=e(228),u=e(738),A=e(314),p=e(0),d=e(748),f=e(924);function g(n){return n._bindingDictionary}function h(n,t,e,o,a){var s,c=C(e.container,a.serviceIdentifier);return c.length===r.BindingCount.NoBindingsAvailable&&e.container.options.autoBindInjectable&&"function"==typeof a.serviceIdentifier&&n.getConstructorMetadata(a.serviceIdentifier).compilerGeneratedMetadata&&(e.container.bind(a.serviceIdentifier).toSelf(),c=C(e.container,a.serviceIdentifier)),s=t?c:c.filter((function(n){var t=new d.Request(n.serviceIdentifier,e,o,n,a);return n.constraint(t)})),function(n,t,e,o){switch(t.length){case r.BindingCount.NoBindingsAvailable:if(e.isOptional())return t;var a=l.getServiceIdentifierAsString(n),s=i.NOT_REGISTERED;throw s+=l.listMetadataForTarget(a,e),s+=l.listRegisteredBindingsForServiceIdentifier(o,a,C),new Error(s);case r.BindingCount.OnlyOneBindingAvailable:if(!e.isArray())return t;case r.BindingCount.MultipleBindingsAvailable:default:if(e.isArray())return t;throw a=l.getServiceIdentifierAsString(n),s=i.AMBIGUOUS_MATCH+" "+a,s+=l.listRegisteredBindingsForServiceIdentifier(o,a,C),new Error(s)}}(a.serviceIdentifier,s,a,e.container),s}function m(n,t,e,r,a,s){var l,c;if(null===a){l=h(n,t,r,null,s),c=new d.Request(e,r,null,l,s);var u=new A.Plan(r,c);r.addPlan(u)}else l=h(n,t,r,a,s),c=a.addChildRequest(s.serviceIdentifier,l,s);l.forEach((function(t){var e=null;if(s.isArray())e=c.addChildRequest(t.serviceIdentifier,t,s);else{if(t.cache)return;e=c}if(t.type===o.BindingTypeEnum.Instance&&null!==t.implementationType){var a=p.getDependencies(n,t.implementationType);if(!r.container.options.skipBaseClassChecks){var l=p.getBaseClassDependencyCount(n,t.implementationType);if(a.length<l){var u=i.ARGUMENTS_LENGTH_MISMATCH(p.getFunctionName(t.implementationType));throw new Error(u)}}a.forEach((function(t){m(n,!1,t.serviceIdentifier,r,e,t)}))}}))}function C(n,t){var e=[],r=g(n);return r.hasKey(t)?e=r.get(t):null!==n.parent&&(e=C(n.parent,t)),e}t.getBindingDictionary=g,t.plan=function(n,t,e,r,i,o,A,p){void 0===p&&(p=!1);var d=new c.Context(t),g=function(n,t,e,r,i,o){var s=n?a.MULTI_INJECT_TAG:a.INJECT_TAG,l=new u.Metadata(s,e),c=new f.Target(t,"",e,l);if(void 0!==i){var A=new u.Metadata(i,o);c.metadata.push(A)}return c}(e,r,i,0,o,A);try{return m(n,p,i,d,null,g),d}catch(n){throw s.isStackOverflowExeption(n)&&d.plan&&l.circularDependencyToException(d.plan.rootRequest),n}},t.createMockRequest=function(n,t,e,r){var i=new f.Target(o.TargetTypeEnum.Variable,"",t,new u.Metadata(e,r)),a=new c.Context(n);return new d.Request(t,a,null,[],i)}},460:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.QueryableString=void 0;var e=function(){function n(n){this.str=n}return n.prototype.startsWith=function(n){return 0===this.str.indexOf(n)},n.prototype.endsWith=function(n){var t,e=n.split("").reverse().join("");return t=this.str.split("").reverse().join(""),this.startsWith.call({str:t},e)},n.prototype.contains=function(n){return-1!==this.str.indexOf(n)},n.prototype.equals=function(n){return this.str===n},n.prototype.value=function(){return this.str},n}();t.QueryableString=e},0:function(n,t,e){"use strict";var r=this&&this.__spreadArray||function(n,t){for(var e=0,r=t.length,i=n.length;e<r;e++,i++)n[i]=t[e];return n};Object.defineProperty(t,"__esModule",{value:!0}),t.getFunctionName=t.getBaseClassDependencyCount=t.getDependencies=void 0;var i=e(744),o=e(674),a=e(421),s=e(867),l=e(800);Object.defineProperty(t,"getFunctionName",{enumerable:!0,get:function(){return l.getFunctionName}});var c=e(924);function u(n,t,e,i){var a=n.getConstructorMetadata(e),s=a.compilerGeneratedMetadata;if(void 0===s){var l=o.MISSING_INJECTABLE_ANNOTATION+" "+t+".";throw new Error(l)}var c=a.userGeneratedMetadata,u=Object.keys(c),d=0===e.length&&u.length>0,f=u.length>e.length,g=function(n,t,e,r,i){for(var o=[],a=0;a<i;a++){var s=A(a,n,t,e,r);null!==s&&o.push(s)}return o}(i,t,s,c,d||f?u.length:e.length),h=p(n,e);return r(r([],g),h)}function A(n,t,e,r,s){var l=s[n.toString()]||[],u=d(l),A=!0!==u.unmanaged,p=r[n];if((p=u.inject||u.multiInject||p)instanceof i.LazyServiceIdentifer&&(p=p.unwrap()),A){if(!t&&(p===Object||p===Function||void 0===p)){var f=o.MISSING_INJECT_ANNOTATION+" argument "+n+" in class "+e+".";throw new Error(f)}var g=new c.Target(a.TargetTypeEnum.ConstructorArgument,u.targetName,p);return g.metadata=l,g}return null}function p(n,t){for(var e=n.getPropertiesMetadata(t),i=[],o=0,s=Object.keys(e);o<s.length;o++){var l=s[o],u=e[l],A=d(e[l]),f=A.targetName||l,g=A.inject||A.multiInject,h=new c.Target(a.TargetTypeEnum.ClassProperty,f,g);h.metadata=u,i.push(h)}var m=Object.getPrototypeOf(t.prototype).constructor;if(m!==Object){var C=p(n,m);i=r(r([],i),C)}return i}function d(n){var t={};return n.forEach((function(n){t[n.key.toString()]=n.value})),{inject:t[s.INJECT_TAG],multiInject:t[s.MULTI_INJECT_TAG],targetName:t[s.NAME_TAG],unmanaged:t[s.UNMANAGED_TAG]}}t.getDependencies=function(n,t){return u(n,l.getFunctionName(t),t,!1)},t.getBaseClassDependencyCount=function n(t,e){var r=Object.getPrototypeOf(e.prototype).constructor;if(r!==Object){var i=u(t,l.getFunctionName(r),r,!0),o=i.map((function(n){return n.metadata.filter((function(n){return n.key===s.UNMANAGED_TAG}))})),a=[].concat.apply([],o).length,c=i.length-a;return c>0?c:n(t,r)}return 0}},748:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Request=void 0;var r=e(791),i=function(){function n(n,t,e,i,o){this.id=r.id(),this.serviceIdentifier=n,this.parentContext=t,this.parentRequest=e,this.target=o,this.childRequests=[],this.bindings=Array.isArray(i)?i:[i],this.requestScope=null===e?new Map:null}return n.prototype.addChildRequest=function(t,e,r){var i=new n(t,this.parentContext,this,e,r);return this.childRequests.push(i),i},n}();t.Request=i},924:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Target=void 0;var r=e(867),i=e(791),o=e(738),a=e(460),s=function(){function n(n,t,e,s){this.id=i.id(),this.type=n,this.serviceIdentifier=e,this.name=new a.QueryableString(t||""),this.metadata=new Array;var l=null;"string"==typeof s?l=new o.Metadata(r.NAMED_TAG,s):s instanceof o.Metadata&&(l=s),null!==l&&this.metadata.push(l)}return n.prototype.hasTag=function(n){for(var t=0,e=this.metadata;t<e.length;t++)if(e[t].key===n)return!0;return!1},n.prototype.isArray=function(){return this.hasTag(r.MULTI_INJECT_TAG)},n.prototype.matchesArray=function(n){return this.matchesTag(r.MULTI_INJECT_TAG)(n)},n.prototype.isNamed=function(){return this.hasTag(r.NAMED_TAG)},n.prototype.isTagged=function(){return this.metadata.some((function(n){return r.NON_CUSTOM_TAG_KEYS.every((function(t){return n.key!==t}))}))},n.prototype.isOptional=function(){return this.matchesTag(r.OPTIONAL_TAG)(!0)},n.prototype.getNamedTag=function(){return this.isNamed()?this.metadata.filter((function(n){return n.key===r.NAMED_TAG}))[0]:null},n.prototype.getCustomTags=function(){return this.isTagged()?this.metadata.filter((function(n){return r.NON_CUSTOM_TAG_KEYS.every((function(t){return n.key!==t}))})):null},n.prototype.matchesNamedTag=function(n){return this.matchesTag(r.NAMED_TAG)(n)},n.prototype.matchesTag=function(n){var t=this;return function(e){for(var r=0,i=t.metadata;r<i.length;r++){var o=i[r];if(o.key===n&&o.value===e)return!0}return!1}},n}();t.Target=s},279:function(n,t,e){"use strict";var r=this&&this.__spreadArray||function(n,t){for(var e=0,r=t.length,i=n.length;e<r;e++,i++)n[i]=t[e];return n};Object.defineProperty(t,"__esModule",{value:!0}),t.resolveInstance=void 0;var i=e(674),o=e(421),a=e(867);t.resolveInstance=function(n,t,e){var s,l,c=null;t.length>0?(l=t.filter((function(n){return null!==n.target&&n.target.type===o.TargetTypeEnum.ConstructorArgument})).map(e),c=function(n,t,e){var r=t.filter((function(n){return null!==n.target&&n.target.type===o.TargetTypeEnum.ClassProperty})),i=r.map(e);return r.forEach((function(t,e){var r;r=t.target.name.value();var o=i[e];n[r]=o})),n}(c=new((s=n).bind.apply(s,r([void 0],l))),t,e)):c=new n;return function(n,t){if(Reflect.hasMetadata(a.POST_CONSTRUCT,n)){var e=Reflect.getMetadata(a.POST_CONSTRUCT,n);try{t[e.value]()}catch(t){throw new Error(i.POST_CONSTRUCT_ERROR(n.name,t.message))}}}(n,c),c}},927:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resolve=void 0;var r=e(674),i=e(421),o=e(265),a=e(800),s=e(279),l=function(n,t,e){try{return e()}catch(e){throw o.isStackOverflowExeption(e)?new Error(r.CIRCULAR_DEPENDENCY_IN_FACTORY(n,t.toString())):e}},c=function(n){return function(t){t.parentContext.setCurrentRequest(t);var e=t.bindings,o=t.childRequests,u=t.target&&t.target.isArray(),A=!(t.parentRequest&&t.parentRequest.target&&t.target&&t.parentRequest.target.matchesArray(t.target.serviceIdentifier));if(u&&A)return o.map((function(t){return c(n)(t)}));var p=null;if(!t.target.isOptional()||0!==e.length){var d=e[0],f=d.scope===i.BindingScopeEnum.Singleton,g=d.scope===i.BindingScopeEnum.Request;if(f&&d.activated)return d.cache;if(g&&null!==n&&n.has(d.id))return n.get(d.id);if(d.type===i.BindingTypeEnum.ConstantValue)p=d.cache,d.activated=!0;else if(d.type===i.BindingTypeEnum.Function)p=d.cache,d.activated=!0;else if(d.type===i.BindingTypeEnum.Constructor)p=d.implementationType;else if(d.type===i.BindingTypeEnum.DynamicValue&&null!==d.dynamicValue)p=l("toDynamicValue",d.serviceIdentifier,(function(){return d.dynamicValue(t.parentContext)}));else if(d.type===i.BindingTypeEnum.Factory&&null!==d.factory)p=l("toFactory",d.serviceIdentifier,(function(){return d.factory(t.parentContext)}));else if(d.type===i.BindingTypeEnum.Provider&&null!==d.provider)p=l("toProvider",d.serviceIdentifier,(function(){return d.provider(t.parentContext)}));else{if(d.type!==i.BindingTypeEnum.Instance||null===d.implementationType){var h=a.getServiceIdentifierAsString(t.serviceIdentifier);throw new Error(r.INVALID_BINDING_TYPE+" "+h)}p=s.resolveInstance(d.implementationType,o,c(n))}return"function"==typeof d.onActivation&&(p=d.onActivation(t.parentContext,p)),f&&(d.cache=p,d.activated=!0),g&&null!==n&&!n.has(d.id)&&n.set(d.id,p),p}}};t.resolve=function(n){return c(n.plan.rootRequest.requestScope)(n.plan.rootRequest)}},366:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingInSyntax=void 0;var r=e(421),i=e(325),o=function(){function n(n){this._binding=n}return n.prototype.inRequestScope=function(){return this._binding.scope=r.BindingScopeEnum.Request,new i.BindingWhenOnSyntax(this._binding)},n.prototype.inSingletonScope=function(){return this._binding.scope=r.BindingScopeEnum.Singleton,new i.BindingWhenOnSyntax(this._binding)},n.prototype.inTransientScope=function(){return this._binding.scope=r.BindingScopeEnum.Transient,new i.BindingWhenOnSyntax(this._binding)},n}();t.BindingInSyntax=o},812:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingInWhenOnSyntax=void 0;var r=e(366),i=e(811),o=e(370),a=function(){function n(n){this._binding=n,this._bindingWhenSyntax=new o.BindingWhenSyntax(this._binding),this._bindingOnSyntax=new i.BindingOnSyntax(this._binding),this._bindingInSyntax=new r.BindingInSyntax(n)}return n.prototype.inRequestScope=function(){return this._bindingInSyntax.inRequestScope()},n.prototype.inSingletonScope=function(){return this._bindingInSyntax.inSingletonScope()},n.prototype.inTransientScope=function(){return this._bindingInSyntax.inTransientScope()},n.prototype.when=function(n){return this._bindingWhenSyntax.when(n)},n.prototype.whenTargetNamed=function(n){return this._bindingWhenSyntax.whenTargetNamed(n)},n.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},n.prototype.whenTargetTagged=function(n,t){return this._bindingWhenSyntax.whenTargetTagged(n,t)},n.prototype.whenInjectedInto=function(n){return this._bindingWhenSyntax.whenInjectedInto(n)},n.prototype.whenParentNamed=function(n){return this._bindingWhenSyntax.whenParentNamed(n)},n.prototype.whenParentTagged=function(n,t){return this._bindingWhenSyntax.whenParentTagged(n,t)},n.prototype.whenAnyAncestorIs=function(n){return this._bindingWhenSyntax.whenAnyAncestorIs(n)},n.prototype.whenNoAncestorIs=function(n){return this._bindingWhenSyntax.whenNoAncestorIs(n)},n.prototype.whenAnyAncestorNamed=function(n){return this._bindingWhenSyntax.whenAnyAncestorNamed(n)},n.prototype.whenAnyAncestorTagged=function(n,t){return this._bindingWhenSyntax.whenAnyAncestorTagged(n,t)},n.prototype.whenNoAncestorNamed=function(n){return this._bindingWhenSyntax.whenNoAncestorNamed(n)},n.prototype.whenNoAncestorTagged=function(n,t){return this._bindingWhenSyntax.whenNoAncestorTagged(n,t)},n.prototype.whenAnyAncestorMatches=function(n){return this._bindingWhenSyntax.whenAnyAncestorMatches(n)},n.prototype.whenNoAncestorMatches=function(n){return this._bindingWhenSyntax.whenNoAncestorMatches(n)},n.prototype.onActivation=function(n){return this._bindingOnSyntax.onActivation(n)},n}();t.BindingInWhenOnSyntax=a},811:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingOnSyntax=void 0;var r=e(370),i=function(){function n(n){this._binding=n}return n.prototype.onActivation=function(n){return this._binding.onActivation=n,new r.BindingWhenSyntax(this._binding)},n}();t.BindingOnSyntax=i},860:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingToSyntax=void 0;var r=e(674),i=e(421),o=e(812),a=e(325),s=function(){function n(n){this._binding=n}return n.prototype.to=function(n){return this._binding.type=i.BindingTypeEnum.Instance,this._binding.implementationType=n,new o.BindingInWhenOnSyntax(this._binding)},n.prototype.toSelf=function(){if("function"!=typeof this._binding.serviceIdentifier)throw new Error(""+r.INVALID_TO_SELF_VALUE);var n=this._binding.serviceIdentifier;return this.to(n)},n.prototype.toConstantValue=function(n){return this._binding.type=i.BindingTypeEnum.ConstantValue,this._binding.cache=n,this._binding.dynamicValue=null,this._binding.implementationType=null,this._binding.scope=i.BindingScopeEnum.Singleton,new a.BindingWhenOnSyntax(this._binding)},n.prototype.toDynamicValue=function(n){return this._binding.type=i.BindingTypeEnum.DynamicValue,this._binding.cache=null,this._binding.dynamicValue=n,this._binding.implementationType=null,new o.BindingInWhenOnSyntax(this._binding)},n.prototype.toConstructor=function(n){return this._binding.type=i.BindingTypeEnum.Constructor,this._binding.implementationType=n,this._binding.scope=i.BindingScopeEnum.Singleton,new a.BindingWhenOnSyntax(this._binding)},n.prototype.toFactory=function(n){return this._binding.type=i.BindingTypeEnum.Factory,this._binding.factory=n,this._binding.scope=i.BindingScopeEnum.Singleton,new a.BindingWhenOnSyntax(this._binding)},n.prototype.toFunction=function(n){if("function"!=typeof n)throw new Error(r.INVALID_FUNCTION_BINDING);var t=this.toConstantValue(n);return this._binding.type=i.BindingTypeEnum.Function,this._binding.scope=i.BindingScopeEnum.Singleton,t},n.prototype.toAutoFactory=function(n){return this._binding.type=i.BindingTypeEnum.Factory,this._binding.factory=function(t){return function(){return t.container.get(n)}},this._binding.scope=i.BindingScopeEnum.Singleton,new a.BindingWhenOnSyntax(this._binding)},n.prototype.toProvider=function(n){return this._binding.type=i.BindingTypeEnum.Provider,this._binding.provider=n,this._binding.scope=i.BindingScopeEnum.Singleton,new a.BindingWhenOnSyntax(this._binding)},n.prototype.toService=function(n){this.toDynamicValue((function(t){return t.container.get(n)}))},n}();t.BindingToSyntax=s},325:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingWhenOnSyntax=void 0;var r=e(811),i=e(370),o=function(){function n(n){this._binding=n,this._bindingWhenSyntax=new i.BindingWhenSyntax(this._binding),this._bindingOnSyntax=new r.BindingOnSyntax(this._binding)}return n.prototype.when=function(n){return this._bindingWhenSyntax.when(n)},n.prototype.whenTargetNamed=function(n){return this._bindingWhenSyntax.whenTargetNamed(n)},n.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},n.prototype.whenTargetTagged=function(n,t){return this._bindingWhenSyntax.whenTargetTagged(n,t)},n.prototype.whenInjectedInto=function(n){return this._bindingWhenSyntax.whenInjectedInto(n)},n.prototype.whenParentNamed=function(n){return this._bindingWhenSyntax.whenParentNamed(n)},n.prototype.whenParentTagged=function(n,t){return this._bindingWhenSyntax.whenParentTagged(n,t)},n.prototype.whenAnyAncestorIs=function(n){return this._bindingWhenSyntax.whenAnyAncestorIs(n)},n.prototype.whenNoAncestorIs=function(n){return this._bindingWhenSyntax.whenNoAncestorIs(n)},n.prototype.whenAnyAncestorNamed=function(n){return this._bindingWhenSyntax.whenAnyAncestorNamed(n)},n.prototype.whenAnyAncestorTagged=function(n,t){return this._bindingWhenSyntax.whenAnyAncestorTagged(n,t)},n.prototype.whenNoAncestorNamed=function(n){return this._bindingWhenSyntax.whenNoAncestorNamed(n)},n.prototype.whenNoAncestorTagged=function(n,t){return this._bindingWhenSyntax.whenNoAncestorTagged(n,t)},n.prototype.whenAnyAncestorMatches=function(n){return this._bindingWhenSyntax.whenAnyAncestorMatches(n)},n.prototype.whenNoAncestorMatches=function(n){return this._bindingWhenSyntax.whenNoAncestorMatches(n)},n.prototype.onActivation=function(n){return this._bindingOnSyntax.onActivation(n)},n}();t.BindingWhenOnSyntax=o},370:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingWhenSyntax=void 0;var r=e(811),i=e(758),o=function(){function n(n){this._binding=n}return n.prototype.when=function(n){return this._binding.constraint=n,new r.BindingOnSyntax(this._binding)},n.prototype.whenTargetNamed=function(n){return this._binding.constraint=i.namedConstraint(n),new r.BindingOnSyntax(this._binding)},n.prototype.whenTargetIsDefault=function(){return this._binding.constraint=function(n){return null!==n.target&&!n.target.isNamed()&&!n.target.isTagged()},new r.BindingOnSyntax(this._binding)},n.prototype.whenTargetTagged=function(n,t){return this._binding.constraint=i.taggedConstraint(n)(t),new r.BindingOnSyntax(this._binding)},n.prototype.whenInjectedInto=function(n){return this._binding.constraint=function(t){return i.typeConstraint(n)(t.parentRequest)},new r.BindingOnSyntax(this._binding)},n.prototype.whenParentNamed=function(n){return this._binding.constraint=function(t){return i.namedConstraint(n)(t.parentRequest)},new r.BindingOnSyntax(this._binding)},n.prototype.whenParentTagged=function(n,t){return this._binding.constraint=function(e){return i.taggedConstraint(n)(t)(e.parentRequest)},new r.BindingOnSyntax(this._binding)},n.prototype.whenAnyAncestorIs=function(n){return this._binding.constraint=function(t){return i.traverseAncerstors(t,i.typeConstraint(n))},new r.BindingOnSyntax(this._binding)},n.prototype.whenNoAncestorIs=function(n){return this._binding.constraint=function(t){return!i.traverseAncerstors(t,i.typeConstraint(n))},new r.BindingOnSyntax(this._binding)},n.prototype.whenAnyAncestorNamed=function(n){return this._binding.constraint=function(t){return i.traverseAncerstors(t,i.namedConstraint(n))},new r.BindingOnSyntax(this._binding)},n.prototype.whenNoAncestorNamed=function(n){return this._binding.constraint=function(t){return!i.traverseAncerstors(t,i.namedConstraint(n))},new r.BindingOnSyntax(this._binding)},n.prototype.whenAnyAncestorTagged=function(n,t){return this._binding.constraint=function(e){return i.traverseAncerstors(e,i.taggedConstraint(n)(t))},new r.BindingOnSyntax(this._binding)},n.prototype.whenNoAncestorTagged=function(n,t){return this._binding.constraint=function(e){return!i.traverseAncerstors(e,i.taggedConstraint(n)(t))},new r.BindingOnSyntax(this._binding)},n.prototype.whenAnyAncestorMatches=function(n){return this._binding.constraint=function(t){return i.traverseAncerstors(t,n)},new r.BindingOnSyntax(this._binding)},n.prototype.whenNoAncestorMatches=function(n){return this._binding.constraint=function(t){return!i.traverseAncerstors(t,n)},new r.BindingOnSyntax(this._binding)},n}();t.BindingWhenSyntax=o},758:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.typeConstraint=t.namedConstraint=t.taggedConstraint=t.traverseAncerstors=void 0;var r=e(867),i=e(738),o=function(n,t){var e=n.parentRequest;return null!==e&&(!!t(e)||o(e,t))};t.traverseAncerstors=o;var a=function(n){return function(t){var e=function(e){return null!==e&&null!==e.target&&e.target.matchesTag(n)(t)};return e.metaData=new i.Metadata(n,t),e}};t.taggedConstraint=a;var s=a(r.NAMED_TAG);t.namedConstraint=s,t.typeConstraint=function(n){return function(t){var e=null;if(null!==t){if(e=t.bindings[0],"string"==typeof n)return e.serviceIdentifier===n;var r=t.bindings[0].implementationType;return n===r}return!1}}},600:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiBindToService=void 0,t.multiBindToService=function(n){return function(t){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return e.forEach((function(e){return n.bind(e).toService(t)}))}}}},265:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isStackOverflowExeption=void 0;var r=e(674);t.isStackOverflowExeption=function(n){return n instanceof RangeError||n.message===r.STACK_OVERFLOW}},791:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.id=void 0;var e=0;t.id=function(){return e++}},800:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.circularDependencyToException=t.listMetadataForTarget=t.listRegisteredBindingsForServiceIdentifier=t.getServiceIdentifierAsString=t.getFunctionName=void 0;var r=e(674);function i(n){return"function"==typeof n?n.name:"symbol"==typeof n?n.toString():n}function o(n,t){return null!==n.parentRequest&&(n.parentRequest.serviceIdentifier===t||o(n.parentRequest,t))}function a(n){if(n.name)return n.name;var t=n.toString(),e=t.match(/^function\s*([^\s(]+)/);return e?e[1]:"Anonymous function: "+t}t.getServiceIdentifierAsString=i,t.listRegisteredBindingsForServiceIdentifier=function(n,t,e){var r="",i=e(n,t);return 0!==i.length&&(r="\nRegistered bindings:",i.forEach((function(n){var t="Object";null!==n.implementationType&&(t=a(n.implementationType)),r=r+"\n "+t,n.constraint.metaData&&(r=r+" - "+n.constraint.metaData)}))),r},t.circularDependencyToException=function n(t){t.childRequests.forEach((function(t){if(o(t,t.serviceIdentifier)){var e=function(n){return function n(t,e){void 0===e&&(e=[]);var r=i(t.serviceIdentifier);return e.push(r),null!==t.parentRequest?n(t.parentRequest,e):e}(n).reverse().join(" --\x3e ")}(t);throw new Error(r.CIRCULAR_DEPENDENCY+" "+e)}n(t)}))},t.listMetadataForTarget=function(n,t){if(t.isTagged()||t.isNamed()){var e="",r=t.getNamedTag(),i=t.getCustomTags();return null!==r&&(e+=r.toString()+"\n"),null!==i&&i.forEach((function(n){e+=n.toString()+"\n"}))," "+n+"\n "+n+" - "+e}return" "+n},t.getFunctionName=a},660:(n,t,e)=>{var r;!function(n){!function(t){var r="object"==typeof e.g?e.g:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),i=o(n);function o(n,t){return function(e,r){"function"!=typeof n[e]&&Object.defineProperty(n,e,{configurable:!0,writable:!0,value:r}),t&&t(e,r)}}void 0===r.Reflect?r.Reflect=n:i=o(r.Reflect,i),function(n){var t=Object.prototype.hasOwnProperty,e="function"==typeof Symbol,r=e&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=e&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",o="function"==typeof Object.create,a={__proto__:[]}instanceof Array,s=!o&&!a,l={create:o?function(){return R(Object.create(null))}:a?function(){return R({__proto__:null})}:function(){return R({})},has:s?function(n,e){return t.call(n,e)}:function(n,t){return t in n},get:s?function(n,e){return t.call(n,e)?n[e]:void 0}:function(n,t){return n[t]}},c=Object.getPrototypeOf(Function),u="object"==typeof process&&process.env&&"true"===process.env.REFLECT_METADATA_USE_MAP_POLYFILL,A=u||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var n={},t=[],e=function(){function n(n,t,e){this._index=0,this._keys=n,this._values=t,this._selector=e}return n.prototype["@@iterator"]=function(){return this},n.prototype[i]=function(){return this},n.prototype.next=function(){var n=this._index;if(n>=0&&n<this._keys.length){var e=this._selector(this._keys[n],this._values[n]);return n+1>=this._keys.length?(this._index=-1,this._keys=t,this._values=t):this._index++,{value:e,done:!1}}return{value:void 0,done:!0}},n.prototype.throw=function(n){throw this._index>=0&&(this._index=-1,this._keys=t,this._values=t),n},n.prototype.return=function(n){return this._index>=0&&(this._index=-1,this._keys=t,this._values=t),{value:n,done:!0}},n}();return function(){function t(){this._keys=[],this._values=[],this._cacheKey=n,this._cacheIndex=-2}return Object.defineProperty(t.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),t.prototype.has=function(n){return this._find(n,!1)>=0},t.prototype.get=function(n){var t=this._find(n,!1);return t>=0?this._values[t]:void 0},t.prototype.set=function(n,t){var e=this._find(n,!0);return this._values[e]=t,this},t.prototype.delete=function(t){var e=this._find(t,!1);if(e>=0){for(var r=this._keys.length,i=e+1;i<r;i++)this._keys[i-1]=this._keys[i],this._values[i-1]=this._values[i];return this._keys.length--,this._values.length--,t===this._cacheKey&&(this._cacheKey=n,this._cacheIndex=-2),!0}return!1},t.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=n,this._cacheIndex=-2},t.prototype.keys=function(){return new e(this._keys,this._values,r)},t.prototype.values=function(){return new e(this._keys,this._values,o)},t.prototype.entries=function(){return new e(this._keys,this._values,a)},t.prototype["@@iterator"]=function(){return this.entries()},t.prototype[i]=function(){return this.entries()},t.prototype._find=function(n,t){return this._cacheKey!==n&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=n)),this._cacheIndex<0&&t&&(this._cacheIndex=this._keys.length,this._keys.push(n),this._values.push(void 0)),this._cacheIndex},t}();function r(n,t){return n}function o(n,t){return t}function a(n,t){return[n,t]}}():Map,p=u||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function n(){this._map=new A}return Object.defineProperty(n.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),n.prototype.has=function(n){return this._map.has(n)},n.prototype.add=function(n){return this._map.set(n,n),this},n.prototype.delete=function(n){return this._map.delete(n)},n.prototype.clear=function(){this._map.clear()},n.prototype.keys=function(){return this._map.keys()},n.prototype.values=function(){return this._map.values()},n.prototype.entries=function(){return this._map.entries()},n.prototype["@@iterator"]=function(){return this.keys()},n.prototype[i]=function(){return this.keys()},n}():Set,d=new(u||"function"!=typeof WeakMap?function(){var n=l.create(),e=r();return function(){function n(){this._key=r()}return n.prototype.has=function(n){var t=i(n,!1);return void 0!==t&&l.has(t,this._key)},n.prototype.get=function(n){var t=i(n,!1);return void 0!==t?l.get(t,this._key):void 0},n.prototype.set=function(n,t){return i(n,!0)[this._key]=t,this},n.prototype.delete=function(n){var t=i(n,!1);return void 0!==t&&delete t[this._key]},n.prototype.clear=function(){this._key=r()},n}();function r(){var t;do{t="@@WeakMap@@"+a()}while(l.has(n,t));return n[t]=!0,t}function i(n,r){if(!t.call(n,e)){if(!r)return;Object.defineProperty(n,e,{value:l.create()})}return n[e]}function o(n,t){for(var e=0;e<t;++e)n[e]=255*Math.random()|0;return n}function a(){var n,t=(n=16,"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(n)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(n)):o(new Uint8Array(n),n):o(new Array(n),n));t[6]=79&t[6]|64,t[8]=191&t[8]|128;for(var e="",r=0;r<16;++r){var i=t[r];4!==r&&6!==r&&8!==r||(e+="-"),i<16&&(e+="0"),e+=i.toString(16).toLowerCase()}return e}}():WeakMap);function f(n,t,e){var r=d.get(n);if(x(r)){if(!e)return;r=new A,d.set(n,r)}var i=r.get(t);if(x(i)){if(!e)return;i=new A,r.set(t,i)}return i}function g(n,t,e){if(h(n,t,e))return!0;var r=P(t);return!_(r)&&g(n,r,e)}function h(n,t,e){var r=f(t,e,!1);return!x(r)&&!!r.has(n)}function m(n,t,e){if(h(n,t,e))return C(n,t,e);var r=P(t);return _(r)?void 0:m(n,r,e)}function C(n,t,e){var r=f(t,e,!1);if(!x(r))return r.get(n)}function y(n,t,e,r){f(e,r,!0).set(n,t)}function b(n,t){var e=I(n,t),r=P(n);if(null===r)return e;var i=b(r,t);if(i.length<=0)return e;if(e.length<=0)return i;for(var o=new p,a=[],s=0,l=e;s<l.length;s++){var c=l[s];o.has(c)||(o.add(c),a.push(c))}for(var u=0,A=i;u<A.length;u++)c=A[u],o.has(c)||(o.add(c),a.push(c));return a}function I(n,t){var e=[],r=f(n,t,!1);if(x(r))return e;for(var o=function(n){var t=N(n,i);if(!k(t))throw new TypeError;var e=t.call(n);if(!B(e))throw new TypeError;return e}(r.keys()),a=0;;){var s=O(o);if(!s)return e.length=a,e;var l=s.value;try{e[a]=l}catch(n){try{M(o)}finally{throw n}}a++}}function v(n){if(null===n)return 1;switch(typeof n){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===n?1:6;default:return 6}}function x(n){return void 0===n}function _(n){return null===n}function B(n){return"object"==typeof n?null!==n:"function"==typeof n}function w(n,t){switch(v(n)){case 0:case 1:case 2:case 3:case 4:case 5:return n}var e=3===t?"string":5===t?"number":"default",i=N(n,r);if(void 0!==i){var o=i.call(n,e);if(B(o))throw new TypeError;return o}return function(n,t){if("string"===t){var e=n.toString;if(k(e)&&!B(i=e.call(n)))return i;if(k(r=n.valueOf)&&!B(i=r.call(n)))return i}else{var r;if(k(r=n.valueOf)&&!B(i=r.call(n)))return i;var i,o=n.toString;if(k(o)&&!B(i=o.call(n)))return i}throw new TypeError}(n,"default"===e?"number":e)}function T(n){var t=w(n,3);return"symbol"==typeof t?t:function(n){return""+n}(t)}function E(n){return Array.isArray?Array.isArray(n):n instanceof Object?n instanceof Array:"[object Array]"===Object.prototype.toString.call(n)}function k(n){return"function"==typeof n}function S(n){return"function"==typeof n}function N(n,t){var e=n[t];if(null!=e){if(!k(e))throw new TypeError;return e}}function O(n){var t=n.next();return!t.done&&t}function M(n){var t=n.return;t&&t.call(n)}function P(n){var t=Object.getPrototypeOf(n);if("function"!=typeof n||n===c)return t;if(t!==c)return t;var e=n.prototype,r=e&&Object.getPrototypeOf(e);if(null==r||r===Object.prototype)return t;var i=r.constructor;return"function"!=typeof i||i===n?t:i}function R(n){return n.__=void 0,delete n.__,n}n("decorate",(function(n,t,e,r){if(x(e)){if(!E(n))throw new TypeError;if(!S(t))throw new TypeError;return function(n,t){for(var e=n.length-1;e>=0;--e){var r=(0,n[e])(t);if(!x(r)&&!_(r)){if(!S(r))throw new TypeError;t=r}}return t}(n,t)}if(!E(n))throw new TypeError;if(!B(t))throw new TypeError;if(!B(r)&&!x(r)&&!_(r))throw new TypeError;return _(r)&&(r=void 0),function(n,t,e,r){for(var i=n.length-1;i>=0;--i){var o=(0,n[i])(t,e,r);if(!x(o)&&!_(o)){if(!B(o))throw new TypeError;r=o}}return r}(n,t,e=T(e),r)})),n("metadata",(function(n,t){return function(e,r){if(!B(e))throw new TypeError;if(!x(r)&&!function(n){switch(v(n)){case 3:case 4:return!0;default:return!1}}(r))throw new TypeError;y(n,t,e,r)}})),n("defineMetadata",(function(n,t,e,r){if(!B(e))throw new TypeError;return x(r)||(r=T(r)),y(n,t,e,r)})),n("hasMetadata",(function(n,t,e){if(!B(t))throw new TypeError;return x(e)||(e=T(e)),g(n,t,e)})),n("hasOwnMetadata",(function(n,t,e){if(!B(t))throw new TypeError;return x(e)||(e=T(e)),h(n,t,e)})),n("getMetadata",(function(n,t,e){if(!B(t))throw new TypeError;return x(e)||(e=T(e)),m(n,t,e)})),n("getOwnMetadata",(function(n,t,e){if(!B(t))throw new TypeError;return x(e)||(e=T(e)),C(n,t,e)})),n("getMetadataKeys",(function(n,t){if(!B(n))throw new TypeError;return x(t)||(t=T(t)),b(n,t)})),n("getOwnMetadataKeys",(function(n,t){if(!B(n))throw new TypeError;return x(t)||(t=T(t)),I(n,t)})),n("deleteMetadata",(function(n,t,e){if(!B(t))throw new TypeError;x(e)||(e=T(e));var r=f(t,e,!1);if(x(r))return!1;if(!r.delete(n))return!1;if(r.size>0)return!0;var i=d.get(t);return i.delete(e),i.size>0||d.delete(t),!0}))}(i)}()}(r||(r={}))},379:(n,t,e)=>{"use strict";var r,i=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}(),o=[];function a(n){for(var t=-1,e=0;e<o.length;e++)if(o[e].identifier===n){t=e;break}return t}function s(n,t){for(var e={},r=[],i=0;i<n.length;i++){var s=n[i],l=t.base?s[0]+t.base:s[0],c=e[l]||0,u="".concat(l," ").concat(c);e[l]=c+1;var A=a(u),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==A?(o[A].references++,o[A].updater(p)):o.push({identifier:u,updater:g(p,t),references:1}),r.push(u)}return r}function l(n){var t=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=e.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){t.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(t);else{var a=i(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,u=(c=[],function(n,t){return c[n]=t,c.filter(Boolean).join("\n")});function A(n,t,e,r){var i=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=u(t,i);else{var o=document.createTextNode(i),a=n.childNodes;a[t]&&n.removeChild(a[t]),a.length?n.insertBefore(o,a[t]):n.appendChild(o)}}function p(n,t,e){var r=e.css,i=e.media,o=e.sourceMap;if(i?n.setAttribute("media",i):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var d=null,f=0;function g(n,t){var e,r,i;if(t.singleton){var o=f++;e=d||(d=l(t)),r=A.bind(null,e,o,!1),i=A.bind(null,e,o,!0)}else e=l(t),r=p.bind(null,e,t),i=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else i()}}n.exports=function(n,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var e=s(n=n||[],t);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<e.length;r++){var i=a(e[r]);o[i].references--}for(var l=s(n,t),c=0;c<e.length;c++){var u=a(e[c]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}e=l}}}}},t={};function e(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{"use strict";var n=e(379),t=e.n(n),r=e(891);t()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var i=e(767);t()(i.Z,{insert:"head",singleton:!1}),i.Z.locals;class o{constructor(n,t){this.x=n.x,this.y=n.y,this.value=t||2,this.previousPosition=null,this.mergedFrom=null}savePosition(){this.previousPosition={x:this.x,y:this.y}}updatePosition(n){this.x=n.x,this.y=n.y}serialize(){return{position:{x:this.x,y:this.y},value:this.value}}get position(){return this._position}set position(n){this._position=n}get value(){return this._value}set value(n){this._value=n}get previousPosition(){return this._previousPosition}set previousPosition(n){this._previousPosition=n}get x(){return this._x}set x(n){this._x=n}get y(){return this._y}set y(n){this._y=n}get mergedFrom(){return this._mergedFrom}set mergedFrom(n){this._mergedFrom=n}}class a{constructor(n,t){this.size=n,this.cells=t?this.fromState(t):this.empty()}empty(){let n=[];for(let t=0;t<this.size;t++){let e=n[t]=[];for(let n=0;n<this.size;n++)e.push(null)}return n}fromState(n){let t=[];for(let e=0;e<this.size;e++){let r=t[e]=[];for(let t=0;t<this.size;t++){let i=n[e][t];i?r.push(new o(i.position,i.value)):r.push(null)}}return t}randomAvailableCell(){let n=this.availableCells();if(n.length)return n[Math.floor(Math.random()*n.length)]}availableCells(){let n=[];return this.eachCell(((t,e,r)=>{r||n.push({x:t,y:e})})),n}eachCell(n){for(let t=0;t<this.size;t++)for(let e=0;e<this.size;e++)n(t,e,this.cells[t][e])}isCellsAvailable(){return!!this.availableCells().length}isCellAvailable(n){return!this.isCellOccupied(n)}isCellOccupied(n){return!!this.cellContent(n)}cellContent(n){return this.withinBounds(n)?this.cells[n.x][n.y]:null}insertTile(n){this.cells[n.x][n.y]=n}removeTile(n){this.cells[n.x][n.y]=null}withinBounds(n){return n.x>=0&&n.x<this.size&&n.y>=0&&n.y<this.size}serialize(){let n=[];for(let t=0;t<this.size;t++){let e=n[t]=[];for(let n=0;n<this.size;n++)this.cells[t][n]?e.push(this.cells[t][n].serialize()):e.push(null)}return{size:this.size,cells:n}}get size(){return this._size}set size(n){this._size=n}get cells(){return this._cells}set cells(n){this._cells=n}get previousState(){return this._previousState}set previousState(n){this._previousState=n}}var s=e(700),l=(e(660),function(n,t,e,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,t,e,r);else for(var s=n.length-1;s>=0;s--)(i=n[s])&&(a=(o<3?i(a):o>3?i(t,e,a):i(t,e))||a);return o>3&&a&&Object.defineProperty(t,e,a),a});let c=class{constructor(){this.tileContainer=document.querySelector(".tile-container"),this.scoreContainer=document.querySelector(".score-container"),this.bestContainer=document.querySelector(".best-container"),this.gridContainer=document.querySelector(".grid-container"),this.gameContainer=document.querySelector(".game-message"),this.score=0,this.createCells()}createCells(){let n,t;for(let e=0;e<4;e++){n=document.createElement("div"),n.className="grid-row";for(let e=0;e<4;e++)t=document.createElement("div"),t.className="grid-cell",n.appendChild(t);this.gridContainer.appendChild(n)}}actuate(n,t){window.requestAnimationFrame((()=>{this.clearContainer(this.tileContainer);for(let t of n.cells)for(let n of t)n&&this.addTile(n);this.updateScore(t.score),this.updateBestScore(t.bestScore),t.terminated&&(t.won?this.message(!0):this.message(!1))}))}continueGame(){this.clearMessage()}clearContainer(n){for(;n.firstChild;)n.removeChild(n.firstChild)}addTile(n){let t=document.createElement("div"),e=document.createElement("div"),r=n.previousPosition||{x:n.x,y:n.y},i=this.positionClass(r),o=["tile",`tile-${n.value}`,i];if(n.value>2048&&o.push("tile-super"),this.applyClasses(t,o),e.classList.add("tile-inner"),e.innerHTML=n.value.toString(),n.previousPosition)window.requestAnimationFrame((()=>{o[2]=this.positionClass({x:n.x,y:n.y}),this.applyClasses(t,o)}));else if(n.mergedFrom){o.push("tile-merged"),this.applyClasses(t,o);for(let t of n.mergedFrom)this.addTile(t)}else o.push("tile-new"),this.applyClasses(t,o);t.appendChild(e),this.tileContainer.appendChild(t)}applyClasses(n,t){n.className=t.join(" ")}normalizePosition(n){return{x:n.x+1,y:n.y+1}}positionClass(n){return`tile-position-${(n=this.normalizePosition(n)).x}-${n.y}`}updateScore(n){this.clearContainer(this.scoreContainer),this.score=n,this.scoreContainer.innerHTML=this.score.toString()}updateBestScore(n){this.bestContainer.innerHTML=n.toString()}message(n){let t,e;n?(e="game-won",t="You win!"):(e="game-over",t="Game over!"),this.gameContainer.classList.add(e),this.gameContainer.querySelector(".message").innerHTML=t}clearMessage(){this.gameContainer.classList.remove("game-won"),this.gameContainer.classList.remove("game-over")}};c=l([(0,s.b2)(),function(n,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,t)}("design:paramtypes",[])],c);const u=c;let A=class{constructor(){this.bestScoreKey="bestScore",this.gameStateKey="gameState",this.storage=window.localStorage}clearGameState(){this.storage.removeItem(this.gameStateKey)}get bestScore(){return this.storage.getItem(this.bestScoreKey)||0}set bestScore(n){this.storage.setItem(this.bestScoreKey,n.toString())}get gameState(){let n=this.storage.getItem(this.gameStateKey);return n?JSON.parse(n):null}set gameState(n){this.storage.setItem(this.gameStateKey,JSON.stringify(n))}};A=function(n,t,e,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,t,e,r);else for(var s=n.length-1;s>=0;s--)(i=n[s])&&(a=(o<3?i(a):o>3?i(t,e,a):i(t,e))||a);return o>3&&a&&Object.defineProperty(t,e,a),a}([(0,s.b2)(),function(n,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,t)}("design:paramtypes",[])],A);const p=A;var d;!function(n){n[n.Up=0]="Up",n[n.Right=1]="Right",n[n.Down=2]="Down",n[n.Left=3]="Left"}(d||(d={}));let f=class{constructor(){this.events=[],this.eventTouchStart="touchstart",this.eventTouchMove="touchmove",this.eventTouchEnd="touchend",this.listen()}on(n,t){this.events[n]||(this.events[n]=[]),this.events[n].push(t)}emit(n,t){let e=this.events[n];if(e)for(let n of e)n(t)}listen(){let n,t,e;document.addEventListener("keydown",(t=>{if(!(t.altKey||t.ctrlKey||t.metaKey||t.shiftKey))switch(t.code){case"ArrowLeft":n=d.Left;break;case"ArrowUp":n=d.Up;break;case"ArrowRight":n=d.Right;break;case"ArrowDown":n=d.Down}void 0!==typeof n&&(t.preventDefault(),this.emit("move",n))})),this.bindButtonPress(".retry-button",this.restart),this.bindButtonPress(".restart-button",this.restart),this.bindButtonPress(".keep-playing-button",this.keepPlaying);let r=document.querySelector(".game-container");r.addEventListener(this.eventTouchStart,(n=>{t=n.touches[0].clientX,e=n.touches[0].clientY,n.preventDefault()})),r.addEventListener(this.eventTouchMove,(n=>n.preventDefault())),r.addEventListener(this.eventTouchEnd,(n=>{let r,i;r=n.changedTouches[0].clientX,i=n.changedTouches[0].clientY;let o=r-t,a=Math.abs(o),s=i-e,l=Math.abs(s);Math.max(a,l)>10&&this.emit("move",a>l?o>0?1:3:s>0?2:0)}))}restart(n){n.preventDefault(),this.emit("restart",null)}keepPlaying(n){n.preventDefault(),this.emit("keepPlaying",null)}bindButtonPress(n,t){let e=document.querySelector(n);e.addEventListener("click",t.bind(this)),e.addEventListener(this.eventTouchEnd,t.bind(this))}};f=function(n,t,e,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,t,e,r);else for(var s=n.length-1;s>=0;s--)(i=n[s])&&(a=(o<3?i(a):o>3?i(t,e,a):i(t,e))||a);return o>3&&a&&Object.defineProperty(t,e,a),a}([(0,s.b2)(),function(n,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,t)}("design:paramtypes",[])],f);const g=f,h={Game:Symbol.for("Game"),HtmlActuator:Symbol.for("HtmlActuator"),KeyboardInputManager:Symbol.for("KeyboardInputManager"),LocalStorageManager:Symbol.for("LocalStorageManager")};var m=function(n,t){return function(e,r){t(e,r,n)}};let C=class{constructor(n,t,e){this.actuator=n,this.input=t,this.storage=e,this.size=4,this.startCells=2}run(){this.input.on("move",this.move.bind(this)),this.input.on("restart",this.restart.bind(this)),this.input.on("keepPlaying",this.keepPlaying.bind(this)),this.setup()}restart(){this.storage.clearGameState(),this.actuator.continueGame(),this.setup()}keepPlaying(){this.isPlaying=!0,this.actuator.continueGame()}get isGameTerminated(){return this.over||this.won&&!this.isPlaying}setup(){let n=this.storage.gameState;n?(this.grid=new a(n.grid.size,n.grid.cells),this.score=n.score,this.over=n.over,this.won=n.won,this.keepPlaying=n.keepPlaying):(this.grid=new a(this.size,null),this.score=0,this.over=!1,this.won=!1,this.isPlaying=!1,this.addStartTiles()),this.actuate()}addStartTiles(){for(let n=0;n<this.startCells;n++)this.addRandomTile()}addRandomTile(){if(this.grid.isCellsAvailable()){let n;n=Math.random()<.9?2:4;let t=new o(this.grid.randomAvailableCell(),n);this.grid.insertTile(t)}}actuate(){this.storage.bestScore<this.score&&(this.storage.bestScore=this.score),this.over?this.storage.clearGameState():this.storage.gameState=this.serialize(),this.actuator.actuate(this.grid,{score:this.score,over:this.over,won:this.won,bestScore:this.storage.bestScore,terminated:this.isGameTerminated})}serialize(){return{grid:this.grid.serialize(),score:this.score,over:this.over,won:this.won,keepPlaying:this.keepPlaying}}prepareTiles(){this.grid.eachCell(((n,t,e)=>{e&&(e.mergedFrom=null,e.savePosition())}))}moveTile(n,t){this.grid.cells[n.x][n.y]=null,this.grid.cells[t.x][t.y]=n,n.updatePosition(t)}move(n){if(this.isGameTerminated)return;let t,e,r=this.getVector(n),i=this.buildTraversals(r),a=!1;this.prepareTiles();for(let n of i.x)for(let s of i.y)if(t={x:n,y:s},e=this.grid.cellContent(t),e){let n=this.findFarthestPosition(t,r),i=this.grid.cellContent(n.next);if(i&&i.value===e.value&&!i.mergedFrom){let t=new o(n.next,2*e.value);t.mergedFrom=[e,i],this.grid.insertTile(t),this.grid.removeTile(e),e.updatePosition(n.next),this.score+=t.value,2048===t.value&&(this.won=!0)}else this.moveTile(e,n.farthest);this.positionsEquals(t,e)||(a=!0)}a&&(this.addRandomTile(),this.isMovesAvailable()||(this.over=!0),this.actuate())}getVector(n){return[{x:0,y:-1},{x:1,y:0},{x:0,y:1},{x:-1,y:0}][n]}buildTraversals(n){let t={x:[],y:[]};for(let n=0;n<this.size;n++)t.x.push(n),t.y.push(n);return 1===n.x&&(t.x=t.x.reverse()),1===n.y&&(t.y=t.y.reverse()),t}findFarthestPosition(n,t){let e;do{e=n,n={x:e.x+t.x,y:e.y+t.y}}while(this.grid.withinBounds(n)&&this.grid.isCellAvailable(n));return{farthest:e,next:n}}isMovesAvailable(){return this.grid.isCellsAvailable()||this.isTileMatchesAvailable()}isTileMatchesAvailable(){let n;for(let t=0;t<this.size;t++)for(let e=0;e<this.size;e++)if(n=this.grid.cellContent({x:t,y:e}),n)for(let r=0;r<4;r++){let i=this.getVector(r),o={x:t+i.x,y:e+i.y},a=this.grid.cellContent(o);if(a&&a.value===n.value)return!0}return!1}positionsEquals(n,t){return n.x===t.x&&n.y===t.y}};C=function(n,t,e,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(n,t,e,r);else for(var s=n.length-1;s>=0;s--)(i=n[s])&&(a=(o<3?i(a):o>3?i(t,e,a):i(t,e))||a);return o>3&&a&&Object.defineProperty(t,e,a),a}([(0,s.b2)(),m(0,(0,s.f3)(h.HtmlActuator)),m(1,(0,s.f3)(h.KeyboardInputManager)),m(2,(0,s.f3)(h.LocalStorageManager)),function(n,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,t)}("design:paramtypes",[u,g,p])],C);const y=C,b=new s.W2;b.bind(h.Game).to(y).inSingletonScope(),b.bind(h.HtmlActuator).to(u).inSingletonScope(),b.bind(h.KeyboardInputManager).to(g).inSingletonScope(),b.bind(h.LocalStorageManager).to(p).inSingletonScope(),window.requestAnimationFrame((()=>b.resolve(y).run()))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,