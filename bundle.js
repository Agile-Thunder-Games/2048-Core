/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var n={259:(n,t,e)=>{"use strict";e.d(t,{Z:()=>o});var r=e(645),i=e.n(r)()((function(n){return n[1]}));i.push([n.id,'@media screen and (max-width: 520px) {\r\n    html, body {\r\n        font-size: 15px;\r\n    }\r\n\r\n    body {\r\n        margin: 20px 0;\r\n        padding: 0 20px;\r\n    }\r\n\r\n    .container {\r\n        width: 280px;\r\n        margin: 0 auto;\r\n    }\r\n\r\n    .score-container, .best-container {\r\n        margin-top: 0;\r\n        padding: 15px 10px;\r\n        min-width: 40px;\r\n    }\r\n\r\n    .heading {\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .game-intro {\r\n        width: 55%;\r\n        display: block;\r\n        box-sizing: border-box;\r\n        line-height: 1.65;\r\n    }\r\n\r\n    .restart-button {\r\n        padding: 0;\r\n        display: block;\r\n        box-sizing: border-box;\r\n        margin-top: 2px;\r\n    }\r\n\r\n    .game-container {\r\n        margin-top: 17px;\r\n        position: relative;\r\n        padding: 10px;\r\n        cursor: default;\r\n        -webkit-touch-callout: none;\r\n        -ms-touch-callout: none;\r\n        -webkit-user-select: none;\r\n        -moz-user-select: none;\r\n        -ms-user-select: none;\r\n        -ms-touch-action: none;\r\n        user-select: none;\r\n        touch-action: none;\r\n        width: 280px;\r\n        height: 280px;\r\n        -webkit-box-sizing: border-box;\r\n        -moz-box-sizing: border-box;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    .game-container .game-message {\r\n        display: none;\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        background: rgba(238, 228, 218, 0.5);\r\n        z-index: 100;\r\n        text-align: center;\r\n        -webkit-animation: fade-in 800ms ease 1200ms;\r\n        -moz-animation: fade-in 800ms ease 1200ms;\r\n        animation: fade-in 800ms ease 1200ms;\r\n        -webkit-animation-fill-mode: both;\r\n        -moz-animation-fill-mode: both;\r\n        animation-fill-mode: both;\r\n    }\r\n\r\n    .game-container .game-message p {\r\n        font-size: 60px;\r\n        font-weight: bold;\r\n        height: 60px;\r\n        line-height: 60px;\r\n        margin-top: 222px;\r\n    }\r\n\r\n    .game-container .game-message .lower {\r\n        display: block;\r\n        margin-top: 59px;\r\n    }\r\n\r\n    .game-container .game-message a {\r\n        display: inline-block;\r\n        background: #8f7a66;\r\n        border-radius: 3px;\r\n        padding: 0 20px;\r\n        text-decoration: none;\r\n        color: #f9f6f2;\r\n        height: 40px;\r\n        line-height: 42px;\r\n        margin-left: 9px;\r\n    }\r\n\r\n    .game-container .game-message a.keep-playing-button {\r\n        display: none;\r\n    }\r\n\r\n    .game-container .game-message.game-won {\r\n        background: rgba(237, 194, 46, 0.5);\r\n        color: #f9f6f2;\r\n    }\r\n\r\n    .game-container .game-message.game-won a.keep-playing-button {\r\n        display: inline-block;\r\n    }\r\n\r\n    .game-container .game-message.game-won, .game-container .game-message.game-over {\r\n        display: block;\r\n    }\r\n\r\n    .grid-container {\r\n        position: absolute;\r\n        z-index: 1;\r\n    }\r\n\r\n    .grid-row {\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .grid-row:last-child {\r\n        margin-bottom: 0;\r\n    }\r\n\r\n    .grid-row:after {\r\n        content: "";\r\n        display: block;\r\n        clear: both;\r\n    }\r\n\r\n    .grid-cell {\r\n        width: 57.5px;\r\n        height: 57.5px;\r\n        margin-right: 10px;\r\n        float: left;\r\n        background: rgba(244, 216, 115, 0.35);\r\n    }\r\n\r\n    .grid-cell:last-child {\r\n        margin-right: 0;\r\n    }\r\n\r\n    .tile-container {\r\n        position: absolute;\r\n        z-index: 2;\r\n    }\r\n\r\n    .tile, .tile .tile-inner {\r\n        width: 58px;\r\n        height: 58px;\r\n        line-height: 58px;\r\n    }\r\n\r\n    .tile.tile-position-1-1 {\r\n        -webkit-transform: translate(0px, 0px);\r\n        -moz-transform: translate(0px, 0px);\r\n        -ms-transform: translate(0px, 0px);\r\n        transform: translate(0px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-1-2 {\r\n        -webkit-transform: translate(0px, 67px);\r\n        -moz-transform: translate(0px, 67px);\r\n        -ms-transform: translate(0px, 67px);\r\n        transform: translate(0px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-1-3 {\r\n        -webkit-transform: translate(0px, 135px);\r\n        -moz-transform: translate(0px, 135px);\r\n        -ms-transform: translate(0px, 135px);\r\n        transform: translate(0px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-1-4 {\r\n        -webkit-transform: translate(0px, 202px);\r\n        -moz-transform: translate(0px, 202px);\r\n        -ms-transform: translate(0px, 202px);\r\n        transform: translate(0px, 202px);\r\n    }\r\n\r\n    .tile.tile-position-2-1 {\r\n        -webkit-transform: translate(67px, 0px);\r\n        -moz-transform: translate(67px, 0px);\r\n        -ms-transform: translate(67px, 0px);\r\n        transform: translate(67px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-2-2 {\r\n        -webkit-transform: translate(67px, 67px);\r\n        -moz-transform: translate(67px, 67px);\r\n        -ms-transform: translate(67px, 67px);\r\n        transform: translate(67px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-2-3 {\r\n        -webkit-transform: translate(67px, 135px);\r\n        -moz-transform: translate(67px, 135px);\r\n        -ms-transform: translate(67px, 135px);\r\n        transform: translate(67px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-2-4 {\r\n        -webkit-transform: translate(67px, 202px);\r\n        -moz-transform: translate(67px, 202px);\r\n        -ms-transform: translate(67px, 202px);\r\n        transform: translate(67px, 202px);\r\n    }\r\n\r\n    .tile.tile-position-3-1 {\r\n        -webkit-transform: translate(135px, 0px);\r\n        -moz-transform: translate(135px, 0px);\r\n        -ms-transform: translate(135px, 0px);\r\n        transform: translate(135px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-3-2 {\r\n        -webkit-transform: translate(135px, 67px);\r\n        -moz-transform: translate(135px, 67px);\r\n        -ms-transform: translate(135px, 67px);\r\n        transform: translate(135px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-3-3 {\r\n        -webkit-transform: translate(135px, 135px);\r\n        -moz-transform: translate(135px, 135px);\r\n        -ms-transform: translate(135px, 135px);\r\n        transform: translate(135px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-3-4 {\r\n        -webkit-transform: translate(135px, 202px);\r\n        -moz-transform: translate(135px, 202px);\r\n        -ms-transform: translate(135px, 202px);\r\n        transform: translate(135px, 202px);\r\n    }\r\n\r\n    .tile.tile-position-4-1 {\r\n        -webkit-transform: translate(202px, 0px);\r\n        -moz-transform: translate(202px, 0px);\r\n        -ms-transform: translate(202px, 0px);\r\n        transform: translate(202px, 0px);\r\n    }\r\n\r\n    .tile.tile-position-4-2 {\r\n        -webkit-transform: translate(202px, 67px);\r\n        -moz-transform: translate(202px, 67px);\r\n        -ms-transform: translate(202px, 67px);\r\n        transform: translate(202px, 67px);\r\n    }\r\n\r\n    .tile.tile-position-4-3 {\r\n        -webkit-transform: translate(202px, 135px);\r\n        -moz-transform: translate(202px, 135px);\r\n        -ms-transform: translate(202px, 135px);\r\n        transform: translate(202px, 135px);\r\n    }\r\n\r\n    .tile.tile-position-4-4 {\r\n        -webkit-transform: translate(202px, 202px);\r\n        -moz-transform: translate(202px, 202px);\r\n        -ms-transform: translate(202px, 202px);\r\n        transform: translate(202px, 202px);\r\n    }\r\n\r\n    .tile .tile-inner {\r\n        font-size: 35px;\r\n    }\r\n\r\n    .game-message p {\r\n        font-size: 30px !important;\r\n        height: 30px !important;\r\n        line-height: 30px !important;\r\n        margin-top: 90px !important;\r\n    }\r\n\r\n    .game-message .lower {\r\n        margin-top: 30px !important;\r\n    }\r\n}\r\n',""]);const o=i},111:(n,t,e)=>{"use strict";e.d(t,{Z:()=>o});var r=e(645),i=e.n(r)()((function(n){return n[1]}));i.push([n.id,':root {\r\n    --blue: rgb(0, 113, 188);\r\n    --white: rgb(248, 248, 248);\r\n    --width: 475px;\r\n    --heigh: var(--width);\r\n    --tile-color: var(--white);\r\n    --tile-4-background: var(--white);\r\n    --tile-8-background: rgb(0, 174, 239);;\r\n    --tile-16-background: rgb(145, 0, 145);\r\n    --tile-32-background: rgb(255, 138, 0);\r\n    --tile-64-background: rgb(140, 198, 0);\r\n    --tile-128-background: rgb(121, 122, 223);\r\n    --tile-256-background: rgb(86, 65, 132);\r\n    --tile-512-background:  rgb(23, 35, 61);\r\n    --tile-1024-background: rgb(255, 121, 25);\r\n    --tile-2048-background:  rgb(200, 83, 0);\r\n    --tile-super-backgroud:  #38362f;\r\n}\r\n\r\nhtml, body {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nbody {\r\n    color: var(--blue);\r\n    background: var(--white);\r\n    font-family: "Clear Sans", "Helvetica Neue", Arial, sans-serif;\r\n    font-size: 18px;\r\n}\r\n\r\np {\r\n    margin-top: 0;\r\n    margin-bottom: 10px;\r\n    line-height: 1.65;\r\n}\r\n\r\na {\r\n    color: rgb(0, 113, 188);\r\n    font-weight: bold;\r\n    text-decoration: underline;\r\n    cursor: pointer;\r\n}\r\n\r\nhr {\r\n    border: none;\r\n    border-bottom: 1px solid #d8d4d0;\r\n    margin-top: 20px;\r\n    margin-bottom: 30px;\r\n}\r\n\r\n\r\n.container {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.footer {\r\n    text-align: center;\r\n}\r\n\r\n.heading:after {\r\n    content: "";\r\n    display: block;\r\n    clear: both;\r\n}\r\n\r\n.scores-container {\r\n    float: left;\r\n    text-align: left;\r\n}\r\n\r\n.score-container,\r\n.best-container {\r\n    position: relative;\r\n    display: inline-block;\r\n    background: rgb(0, 113, 188);\r\n    padding: 15px 25px;\r\n    font-size: 25px;\r\n    height: 25px;\r\n    line-height: 47px;\r\n    font-weight: bold;\r\n    color: white;\r\n    text-align: center;\r\n}\r\n\r\n.score-container:after,\r\n.best-container:after {\r\n    position: absolute;\r\n    width: 100%;\r\n    top: 10px;\r\n    left: 0;\r\n    text-transform: uppercase;\r\n    font-size: 13px;\r\n    line-height: 13px;\r\n    text-align: center;\r\n    color: white;\r\n}\r\n\r\n.score-container:after {\r\n    content: "Резултат";\r\n}\r\n\r\n.best-container:after {\r\n    content: "Рекорд";\r\n}\r\n\r\n.important {\r\n    text-transform: uppercase;\r\n}\r\n\r\n.game-container {\r\n    margin-top: 1em;\r\n    padding: 0.85em;\r\n    cursor: default;\r\n    -webkit-touch-callout: none;\r\n    -ms-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    -ms-touch-action: none;\r\n    user-select: none;\r\n    touch-action: none;\r\n    background: rgb(0, 113, 188);\r\n    width: var(--width);\r\n    height: var(--heigh);\r\n    border-radius: 3.5rem;    \r\n}\r\n\r\n.game-container .game-message {\r\n    display: none;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background: rgba(0, 174, 239, 0.5);\r\n    z-index: 100;\r\n    text-align: center;\r\n}\r\n\r\n.game-container .game-message p {\r\n    font-size: 60px;\r\n    font-weight: bold;\r\n    height: 60px;\r\n    color: white;\r\n    line-height: 60px;\r\n    margin-top: 222px;\r\n}\r\n\r\n.game-container .game-message .lower {\r\n    display: block;\r\n    margin-top: 59px;\r\n}\r\n\r\n.game-container .game-message a {\r\n    display: inline-block;\r\n    background: rgba(58, 90, 155, 0.5);\r\n    border-radius: 3px;\r\n    padding: 0 20px;\r\n    text-decoration: none;\r\n    color: white;\r\n    height: 40px;\r\n    line-height: 42px;\r\n    margin-left: 9px;\r\n}\r\n\r\n.game-container .game-message a.keep-playing-button {\r\n    display: none;\r\n}\r\n\r\n.game-container .game-message.game-won {\r\n    background: rgba(58, 90, 155, 0.5);\r\n    color: white;\r\n}\r\n\r\n.game-container .game-message.game-won a.keep-playing-button {\r\n    display: inline-block;\r\n }\r\n\r\n.game-container .game-message.game-won,\r\n.game-container .game-message.game-over {\r\n    display: block;\r\n}\r\n\r\n.grid-container {\r\n    position: absolute;\r\n}\r\n\r\n.grid-row {\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.grid-row:last-child {\r\n    margin-bottom: 0;\r\n}\r\n\r\n.grid-row:after {\r\n    content: "";\r\n    display: block;\r\n    clear: both;\r\n}\r\n\r\n.grid-cell {\r\n    width: 106.25px;\r\n    height: 106.25px;\r\n    margin-right: 15px;\r\n    float: left;\r\n    background: rgba(244, 216, 115, 0.25);\r\n    border-radius: 50%;\r\n}\r\n\r\n.grid-cell:last-child {\r\n    margin-right: 0;\r\n}\r\n\r\n.tile, .tile .tile-inner {\r\n    width: 107px;\r\n    height: 107px;\r\n    line-height: 107px;\r\n    border-radius: 50%;\r\n}\r\n\r\n.tile.tile-position-1-1 {\r\n    -webkit-transform: translate(0px, 0px);\r\n    -moz-transform: translate(0px, 0px);\r\n    -ms-transform: translate(0px, 0px);\r\n    transform: translate(0px, 0px);\r\n}\r\n\r\n.tile.tile-position-1-2 {\r\n    -webkit-transform: translate(0px, 121px);\r\n    -moz-transform: translate(0px, 121px);\r\n    -ms-transform: translate(0px, 121px);\r\n    transform: translate(0px, 121px);\r\n}\r\n\r\n.tile.tile-position-1-3 {\r\n    -webkit-transform: translate(0px, 242px);\r\n    -moz-transform: translate(0px, 242px);\r\n    -ms-transform: translate(0px, 242px);\r\n    transform: translate(0px, 242px);\r\n}\r\n\r\n.tile.tile-position-1-4 {\r\n    -webkit-transform: translate(0px, 363px);\r\n    -moz-transform: translate(0px, 363px);\r\n    -ms-transform: translate(0px, 363px);\r\n    transform: translate(0px, 363px);\r\n}\r\n\r\n.tile.tile-position-2-1 {\r\n    -webkit-transform: translate(121px, 0px);\r\n    -moz-transform: translate(121px, 0px);\r\n    -ms-transform: translate(121px, 0px);\r\n    transform: translate(121px, 0px);\r\n}\r\n\r\n.tile.tile-position-2-2 {\r\n    -webkit-transform: translate(121px, 121px);\r\n    -moz-transform: translate(121px, 121px);\r\n    -ms-transform: translate(121px, 121px);\r\n    transform: translate(121px, 121px);\r\n}\r\n\r\n.tile.tile-position-2-3 {\r\n    -webkit-transform: translate(121px, 242px);\r\n    -moz-transform: translate(121px, 242px);\r\n    -ms-transform: translate(121px, 242px);\r\n    transform: translate(121px, 242px);\r\n}\r\n\r\n.tile.tile-position-2-4 {\r\n    -webkit-transform: translate(121px, 363px);\r\n    -moz-transform: translate(121px, 363px);\r\n    -ms-transform: translate(121px, 363px);\r\n    transform: translate(121px, 363px);\r\n}\r\n\r\n.tile.tile-position-3-1 {\r\n    -webkit-transform: translate(242px, 0px);\r\n    -moz-transform: translate(242px, 0px);\r\n    -ms-transform: translate(242px, 0px);\r\n    transform: translate(242px, 0px);\r\n}\r\n\r\n.tile.tile-position-3-2 {\r\n    -webkit-transform: translate(242px, 121px);\r\n    -moz-transform: translate(242px, 121px);\r\n    -ms-transform: translate(242px, 121px);\r\n    transform: translate(242px, 121px);\r\n}\r\n\r\n.tile.tile-position-3-3 {\r\n    -webkit-transform: translate(242px, 242px);\r\n    -moz-transform: translate(242px, 242px);\r\n    -ms-transform: translate(242px, 242px);\r\n    transform: translate(242px, 242px);\r\n}\r\n\r\n.tile.tile-position-3-4 {\r\n    -webkit-transform: translate(242px, 363px);\r\n    -moz-transform: translate(242px, 363px);\r\n    -ms-transform: translate(242px, 363px);\r\n    transform: translate(242px, 363px);\r\n}\r\n\r\n.tile.tile-position-4-1 {\r\n    -webkit-transform: translate(363px, 0px);\r\n    -moz-transform: translate(363px, 0px);\r\n    -ms-transform: translate(363px, 0px);\r\n    transform: translate(363px, 0px);\r\n}\r\n\r\n.tile.tile-position-4-2 {\r\n    -webkit-transform: translate(363px, 121px);\r\n    -moz-transform: translate(363px, 121px);\r\n    -ms-transform: translate(363px, 121px);\r\n    transform: translate(363px, 121px);\r\n}\r\n\r\n.tile.tile-position-4-3 {\r\n    -webkit-transform: translate(363px, 242px);\r\n    -moz-transform: translate(363px, 242px);\r\n    -ms-transform: translate(363px, 242px);\r\n    transform: translate(363px, 242px);\r\n}\r\n\r\n.tile.tile-position-4-4 {\r\n    -webkit-transform: translate(363px, 363px);\r\n    -moz-transform: translate(363px, 363px);\r\n    -ms-transform: translate(363px, 363px);\r\n    transform: translate(363px, 363px);\r\n}\r\n\r\n.tile {\r\n    position: absolute;\r\n    -webkit-transition: 100ms ease-in-out;\r\n    -moz-transition: 100ms ease-in-out;\r\n    transition: 100ms ease-in-out;\r\n    -webkit-transition-property: -webkit-transform;\r\n    -moz-transition-property: -moz-transform;\r\n    transition-property: transform;\r\n}\r\n\r\n.tile .tile-inner {\r\n    background: white;\r\n    color: rgb(0, 174, 239);\r\n    text-align: center;\r\n    font-weight: bold;\r\n    z-index: 10;\r\n    font-size: 55px;\r\n}\r\n\r\n.tile.tile-2 .tile-inner {\r\n    background: var(--tile-color);\r\n}\r\n\r\n.tile.tile-4 .tile-inner {\r\n    background: var(--tile-4-background);\r\n}\r\n\r\n.tile.tile-8 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-8-background);\r\n}\r\n\r\n.tile.tile-16 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-16-background);\r\n}\r\n\r\n.tile.tile-32 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-32-background);\r\n}\r\n\r\n.tile.tile-64 .tile-inner {\r\n    color: var(--tile-color);\r\n    background: var(--tile-64-background);\r\n}\r\n\r\n.tile.tile-128 .tile-inner {\r\n    font-size: 45px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-128-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-128 .tile-inner {\r\n        font-size: 25px;\r\n    }\r\n}\r\n\r\n.tile.tile-256 .tile-inner {\r\n    font-size: 45px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-256-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-256 .tile-inner {\r\n        font-size: 25px;\r\n    }\r\n}\r\n\r\n.tile.tile-512 .tile-inner {\r\n    font-size: 45px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-512-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-512 .tile-inner {\r\n        font-size: 25px;\r\n    }\r\n}\r\n\r\n.tile.tile-1024 .tile-inner {\r\n    font-size: 35px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-1024-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-1024 .tile-inner {\r\n        font-size: 15px;\r\n    }\r\n}\r\n\r\n.tile.tile-2048 .tile-inner {\r\n    font-size: 35px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-2048-background);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-2048 .tile-inner {\r\n        font-size: 15px;\r\n    }\r\n}\r\n\r\n.tile.tile-super .tile-inner {\r\n    font-size: 30px;\r\n    color: var(--tile-color);\r\n    background: var(--tile-super-backgroud);\r\n}\r\n\r\n@media screen and (max-width: 520px) {\r\n    .tile.tile-super .tile-inner {\r\n        font-size: 10px;\r\n    }\r\n}\r\n\r\n@-webkit-keyframes appear {\r\n    0% {\r\n        opacity: 0;\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    100% {\r\n        opacity: 1;\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@-moz-keyframes appear {\r\n    0% {\r\n        opacity: 0;\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    100% {\r\n        opacity: 1;\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@keyframes appear {\r\n    0% {\r\n        opacity: 0;\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    100% {\r\n        opacity: 1;\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n.tile-new .tile-inner {\r\n    -webkit-animation: appear 200ms ease 100ms;\r\n    -moz-animation: appear 200ms ease 100ms;\r\n    animation: appear 200ms ease 100ms;\r\n    -webkit-animation-fill-mode: backwards;\r\n    -moz-animation-fill-mode: backwards;\r\n    animation-fill-mode: backwards;\r\n}\r\n\r\n@-webkit-keyframes pop {\r\n    0% {\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    50% {\r\n        -webkit-transform: scale(1.2);\r\n        -moz-transform: scale(1.2);\r\n        -ms-transform: scale(1.2);\r\n        transform: scale(1.2);\r\n    }\r\n\r\n    100% {\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@-moz-keyframes pop {\r\n    0% {\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    50% {\r\n        -webkit-transform: scale(1.2);\r\n        -moz-transform: scale(1.2);\r\n        -ms-transform: scale(1.2);\r\n        transform: scale(1.2);\r\n    }\r\n\r\n    100% {\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n@keyframes pop {\r\n    0% {\r\n        -webkit-transform: scale(0);\r\n        -moz-transform: scale(0);\r\n        -ms-transform: scale(0);\r\n        transform: scale(0);\r\n    }\r\n\r\n    50% {\r\n        -webkit-transform: scale(1.2);\r\n        -moz-transform: scale(1.2);\r\n        -ms-transform: scale(1.2);\r\n        transform: scale(1.2);\r\n    }\r\n\r\n    100% {\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n.tile-merged .tile-inner {\r\n    z-index: 20;\r\n    -webkit-animation: pop 200ms ease 100ms;\r\n    -moz-animation: pop 200ms ease 100ms;\r\n    animation: pop 200ms ease 100ms;\r\n    -webkit-animation-fill-mode: backwards;\r\n    -moz-animation-fill-mode: backwards;\r\n    animation-fill-mode: backwards;\r\n}\r\n\r\n.above-game {\r\n    display: block;\r\n    clear: right;\r\n    float: right;\r\n}\r\n\r\n.game-intro {\r\n    float: left;\r\n    line-height: 42px;\r\n    margin-bottom: 0;\r\n}\r\n\r\n.restart-button {\r\n    display: inline-block;\r\n    background: rgb(0, 113, 188);\r\n    padding: 5px 20px;\r\n    text-decoration: none;\r\n    color: white;\r\n    line-height: 45px;\r\n    text-align: center;\r\n}\r\n\r\n.game-explanation {\r\n    margin-top: 50px;\r\n}\r\n',""]);const o=i},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<n.length;s++){var u=[].concat(n[s]);r&&i[u[0]]||(e&&(u[2]?u[2]="".concat(e," and ").concat(u[2]):u[2]=e),t.push(u))}},t}},934:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tagProperty=t.tagParameter=t.decorate=void 0;var r=e(674),i=e(867);function o(n,t,e,i,o){var a={},s="number"==typeof o,u=void 0!==o&&s?o.toString():e;if(s&&void 0!==e)throw new Error(r.INVALID_DECORATOR_OPERATION);Reflect.hasOwnMetadata(n,t)&&(a=Reflect.getMetadata(n,t));var c=a[u];if(Array.isArray(c))for(var l=0,p=c;l<p.length;l++){var f=p[l];if(f.key===i.key)throw new Error(r.DUPLICATED_METADATA+" "+f.key.toString())}else c=[];c.push(i),a[u]=c,Reflect.defineMetadata(n,a,t)}function a(n,t){Reflect.decorate(n,t)}function s(n,t){return function(e,r){t(e,r,n)}}t.tagParameter=function(n,t,e,r){o(i.TAGGED,n,t,r,e)},t.tagProperty=function(n,t,e){o(i.TAGGED_PROP,n.constructor,t,e)},t.decorate=function(n,t,e){"number"==typeof e?a([s(e,n)],t):"string"==typeof e?Reflect.decorate([n],t,e):a([n],t)}},744:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inject=t.LazyServiceIdentifer=void 0;var r=e(674),i=e(867),o=e(738),a=e(934),s=function(){function n(n){this._cb=n}return n.prototype.unwrap=function(){return this._cb()},n}();t.LazyServiceIdentifer=s,t.inject=function(n){return function(t,e,s){if(void 0===n)throw new Error(r.UNDEFINED_INJECT_ANNOTATION(t.name));var u=new o.Metadata(i.INJECT_TAG,n);"number"==typeof s?a.tagParameter(t,e,s,u):a.tagProperty(t,e,u)}}},315:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.injectable=void 0;var r=e(674),i=e(867);t.injectable=function(){return function(n){if(Reflect.hasOwnMetadata(i.PARAM_TYPES,n))throw new Error(r.DUPLICATED_INJECTABLE_DECORATOR);var t=Reflect.getMetadata(i.DESIGN_PARAM_TYPES,n)||[];return Reflect.defineMetadata(i.PARAM_TYPES,t,n),n}}},693:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiInject=void 0;var r=e(867),i=e(738),o=e(934);t.multiInject=function(n){return function(t,e,a){var s=new i.Metadata(r.MULTI_INJECT_TAG,n);"number"==typeof a?o.tagParameter(t,e,a,s):o.tagProperty(t,e,s)}}},85:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.named=void 0;var r=e(867),i=e(738),o=e(934);t.named=function(n){return function(t,e,a){var s=new i.Metadata(r.NAMED_TAG,n);"number"==typeof a?o.tagParameter(t,e,a,s):o.tagProperty(t,e,s)}}},515:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.optional=void 0;var r=e(867),i=e(738),o=e(934);t.optional=function(){return function(n,t,e){var a=new i.Metadata(r.OPTIONAL_TAG,!0);"number"==typeof e?o.tagParameter(n,t,e,a):o.tagProperty(n,t,a)}}},14:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.postConstruct=void 0;var r=e(674),i=e(867),o=e(738);t.postConstruct=function(){return function(n,t,e){var a=new o.Metadata(i.POST_CONSTRUCT,t);if(Reflect.hasOwnMetadata(i.POST_CONSTRUCT,n.constructor))throw new Error(r.MULTIPLE_POST_CONSTRUCT_METHODS);Reflect.defineMetadata(i.POST_CONSTRUCT,a,n.constructor)}}},52:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tagged=void 0;var r=e(738),i=e(934);t.tagged=function(n,t){return function(e,o,a){var s=new r.Metadata(n,t);"number"==typeof a?i.tagParameter(e,o,a,s):i.tagProperty(e,o,s)}}},638:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.targetName=void 0;var r=e(867),i=e(738),o=e(934);t.targetName=function(n){return function(t,e,a){var s=new i.Metadata(r.NAME_TAG,n);o.tagParameter(t,e,a,s)}}},757:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unmanaged=void 0;var r=e(867),i=e(738),o=e(934);t.unmanaged=function(){return function(n,t,e){var a=new i.Metadata(r.UNMANAGED_TAG,!0);o.tagParameter(n,t,e,a)}}},290:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Binding=void 0;var r=e(421),i=e(791),o=function(){function n(n,t){this.id=i.id(),this.activated=!1,this.serviceIdentifier=n,this.scope=t,this.type=r.BindingTypeEnum.Invalid,this.constraint=function(n){return!0},this.implementationType=null,this.cache=null,this.factory=null,this.provider=null,this.onActivation=null,this.dynamicValue=null}return n.prototype.clone=function(){var t=new n(this.serviceIdentifier,this.scope);return t.activated=t.scope===r.BindingScopeEnum.Singleton&&this.activated,t.implementationType=this.implementationType,t.dynamicValue=this.dynamicValue,t.scope=this.scope,t.type=this.type,t.factory=this.factory,t.provider=this.provider,t.constraint=this.constraint,t.onActivation=this.onActivation,t.cache=this.cache,t},n}();t.Binding=o},184:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingCount=void 0,t.BindingCount={MultipleBindingsAvailable:2,NoBindingsAvailable:0,OnlyOneBindingAvailable:1}},674:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.STACK_OVERFLOW=t.CIRCULAR_DEPENDENCY_IN_FACTORY=t.POST_CONSTRUCT_ERROR=t.MULTIPLE_POST_CONSTRUCT_METHODS=t.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK=t.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE=t.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE=t.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT=t.ARGUMENTS_LENGTH_MISMATCH=t.INVALID_DECORATOR_OPERATION=t.INVALID_TO_SELF_VALUE=t.INVALID_FUNCTION_BINDING=t.INVALID_MIDDLEWARE_RETURN=t.NO_MORE_SNAPSHOTS_AVAILABLE=t.INVALID_BINDING_TYPE=t.NOT_IMPLEMENTED=t.CIRCULAR_DEPENDENCY=t.UNDEFINED_INJECT_ANNOTATION=t.MISSING_INJECT_ANNOTATION=t.MISSING_INJECTABLE_ANNOTATION=t.NOT_REGISTERED=t.CANNOT_UNBIND=t.AMBIGUOUS_MATCH=t.KEY_NOT_FOUND=t.NULL_ARGUMENT=t.DUPLICATED_METADATA=t.DUPLICATED_INJECTABLE_DECORATOR=void 0,t.DUPLICATED_INJECTABLE_DECORATOR="Cannot apply @injectable decorator multiple times.",t.DUPLICATED_METADATA="Metadata key was used more than once in a parameter:",t.NULL_ARGUMENT="NULL argument",t.KEY_NOT_FOUND="Key Not Found",t.AMBIGUOUS_MATCH="Ambiguous match found for serviceIdentifier:",t.CANNOT_UNBIND="Could not unbind serviceIdentifier:",t.NOT_REGISTERED="No matching bindings found for serviceIdentifier:",t.MISSING_INJECTABLE_ANNOTATION="Missing required @injectable annotation in:",t.MISSING_INJECT_ANNOTATION="Missing required @inject or @multiInject annotation in:",t.UNDEFINED_INJECT_ANNOTATION=function(n){return"@inject called with undefined this could mean that the class "+n+" has a circular dependency problem. You can use a LazyServiceIdentifer to  overcome this limitation."},t.CIRCULAR_DEPENDENCY="Circular dependency found:",t.NOT_IMPLEMENTED="Sorry, this feature is not fully implemented yet.",t.INVALID_BINDING_TYPE="Invalid binding type:",t.NO_MORE_SNAPSHOTS_AVAILABLE="No snapshot available to restore.",t.INVALID_MIDDLEWARE_RETURN="Invalid return type in middleware. Middleware must return!",t.INVALID_FUNCTION_BINDING="Value provided to function binding must be a function!",t.INVALID_TO_SELF_VALUE="The toSelf function can only be applied when a constructor is used as service identifier",t.INVALID_DECORATOR_OPERATION="The @inject @multiInject @tagged and @named decorators must be applied to the parameters of a class constructor or a class property.",t.ARGUMENTS_LENGTH_MISMATCH=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return"The number of constructor arguments in the derived class "+n[0]+" must be >= than the number of constructor arguments of its base class."},t.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT="Invalid Container constructor argument. Container options must be an object.",t.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE="Invalid Container option. Default scope must be a string ('singleton' or 'transient').",t.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE="Invalid Container option. Auto bind injectable must be a boolean",t.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK="Invalid Container option. Skip base check must be a boolean",t.MULTIPLE_POST_CONSTRUCT_METHODS="Cannot apply @postConstruct decorator multiple times in the same class",t.POST_CONSTRUCT_ERROR=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return"@postConstruct error in class "+n[0]+": "+n[1]},t.CIRCULAR_DEPENDENCY_IN_FACTORY=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return"It looks like there is a circular dependency in one of the '"+n[0]+"' bindings. Please investigate bindings withservice identifier '"+n[1]+"'."},t.STACK_OVERFLOW="Maximum call stack size exceeded"},421:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TargetTypeEnum=t.BindingTypeEnum=t.BindingScopeEnum=void 0,t.BindingScopeEnum={Request:"Request",Singleton:"Singleton",Transient:"Transient"},t.BindingTypeEnum={ConstantValue:"ConstantValue",Constructor:"Constructor",DynamicValue:"DynamicValue",Factory:"Factory",Function:"Function",Instance:"Instance",Invalid:"Invalid",Provider:"Provider"},t.TargetTypeEnum={ClassProperty:"ClassProperty",ConstructorArgument:"ConstructorArgument",Variable:"Variable"}},867:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NON_CUSTOM_TAG_KEYS=t.POST_CONSTRUCT=t.DESIGN_PARAM_TYPES=t.PARAM_TYPES=t.TAGGED_PROP=t.TAGGED=t.MULTI_INJECT_TAG=t.INJECT_TAG=t.OPTIONAL_TAG=t.UNMANAGED_TAG=t.NAME_TAG=t.NAMED_TAG=void 0,t.NAMED_TAG="named",t.NAME_TAG="name",t.UNMANAGED_TAG="unmanaged",t.OPTIONAL_TAG="optional",t.INJECT_TAG="inject",t.MULTI_INJECT_TAG="multi_inject",t.TAGGED="inversify:tagged",t.TAGGED_PROP="inversify:tagged_props",t.PARAM_TYPES="inversify:paramtypes",t.DESIGN_PARAM_TYPES="design:paramtypes",t.POST_CONSTRUCT="post_construct",t.NON_CUSTOM_TAG_KEYS=[t.INJECT_TAG,t.MULTI_INJECT_TAG,t.NAME_TAG,t.UNMANAGED_TAG,t.NAMED_TAG,t.OPTIONAL_TAG]},389:function(n,t,e){"use strict";var r=this&&this.__awaiter||function(n,t,e,r){return new(e||(e=Promise))((function(i,o){function a(n){try{u(r.next(n))}catch(n){o(n)}}function s(n){try{u(r.throw(n))}catch(n){o(n)}}function u(n){var t;n.done?i(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(a,s)}u((r=r.apply(n,t||[])).next())}))},i=this&&this.__generator||function(n,t){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(n,a)}catch(n){o=[6,n],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=this&&this.__spreadArray||function(n,t){for(var e=0,r=t.length,i=n.length;e<r;e++,i++)n[i]=t[e];return n};Object.defineProperty(t,"__esModule",{value:!0}),t.Container=void 0;var a=e(290),s=e(674),u=e(421),c=e(867),l=e(377),p=e(311),f=e(927),d=e(860),h=e(791),g=e(800),m=e(13),y=e(175),v=function(){function n(n){this._appliedMiddleware=[];var t=n||{};if("object"!=typeof t)throw new Error(""+s.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);if(void 0===t.defaultScope)t.defaultScope=u.BindingScopeEnum.Transient;else if(t.defaultScope!==u.BindingScopeEnum.Singleton&&t.defaultScope!==u.BindingScopeEnum.Transient&&t.defaultScope!==u.BindingScopeEnum.Request)throw new Error(""+s.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);if(void 0===t.autoBindInjectable)t.autoBindInjectable=!1;else if("boolean"!=typeof t.autoBindInjectable)throw new Error(""+s.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);if(void 0===t.skipBaseClassChecks)t.skipBaseClassChecks=!1;else if("boolean"!=typeof t.skipBaseClassChecks)throw new Error(""+s.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);this.options={autoBindInjectable:t.autoBindInjectable,defaultScope:t.defaultScope,skipBaseClassChecks:t.skipBaseClassChecks},this.id=h.id(),this._bindingDictionary=new y.Lookup,this._snapshots=[],this._middleware=null,this.parent=null,this._metadataReader=new l.MetadataReader}return n.merge=function(t,e){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];var a=new n,s=o([t,e],r).map((function(n){return p.getBindingDictionary(n)})),u=p.getBindingDictionary(a);function c(n,t){n.traverse((function(n,e){e.forEach((function(n){t.add(n.serviceIdentifier,n.clone())}))}))}return s.forEach((function(n){c(n,u)})),a},n.prototype.load=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];for(var e=this._getContainerModuleHelpersFactory(),r=0,i=n;r<i.length;r++){var o=i[r],a=e(o.id);o.registry(a.bindFunction,a.unbindFunction,a.isboundFunction,a.rebindFunction)}},n.prototype.loadAsync=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return r(this,void 0,void 0,(function(){var t,e,r,o,a;return i(this,(function(i){switch(i.label){case 0:t=this._getContainerModuleHelpersFactory(),e=0,r=n,i.label=1;case 1:return e<r.length?(o=r[e],a=t(o.id),[4,o.registry(a.bindFunction,a.unbindFunction,a.isboundFunction,a.rebindFunction)]):[3,4];case 2:i.sent(),i.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},n.prototype.unload=function(){for(var n=this,t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=function(n){return function(t){return t.moduleId===n}};t.forEach((function(t){var e=r(t.id);n._bindingDictionary.removeByCondition(e)}))},n.prototype.bind=function(n){var t=this.options.defaultScope||u.BindingScopeEnum.Transient,e=new a.Binding(n,t);return this._bindingDictionary.add(n,e),new d.BindingToSyntax(e)},n.prototype.rebind=function(n){return this.unbind(n),this.bind(n)},n.prototype.unbind=function(n){try{this._bindingDictionary.remove(n)}catch(t){throw new Error(s.CANNOT_UNBIND+" "+g.getServiceIdentifierAsString(n))}},n.prototype.unbindAll=function(){this._bindingDictionary=new y.Lookup},n.prototype.isBound=function(n){var t=this._bindingDictionary.hasKey(n);return!t&&this.parent&&(t=this.parent.isBound(n)),t},n.prototype.isBoundNamed=function(n,t){return this.isBoundTagged(n,c.NAMED_TAG,t)},n.prototype.isBoundTagged=function(n,t,e){var r=!1;if(this._bindingDictionary.hasKey(n)){var i=this._bindingDictionary.get(n),o=p.createMockRequest(this,n,t,e);r=i.some((function(n){return n.constraint(o)}))}return!r&&this.parent&&(r=this.parent.isBoundTagged(n,t,e)),r},n.prototype.snapshot=function(){this._snapshots.push(m.ContainerSnapshot.of(this._bindingDictionary.clone(),this._middleware))},n.prototype.restore=function(){var n=this._snapshots.pop();if(void 0===n)throw new Error(s.NO_MORE_SNAPSHOTS_AVAILABLE);this._bindingDictionary=n.bindings,this._middleware=n.middleware},n.prototype.createChild=function(t){var e=new n(t||this.options);return e.parent=this,e},n.prototype.applyMiddleware=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];this._appliedMiddleware=this._appliedMiddleware.concat(n);var e=this._middleware?this._middleware:this._planAndResolve();this._middleware=n.reduce((function(n,t){return t(n)}),e)},n.prototype.applyCustomMetadataReader=function(n){this._metadataReader=n},n.prototype.get=function(n){return this._get(!1,!1,u.TargetTypeEnum.Variable,n)},n.prototype.getTagged=function(n,t,e){return this._get(!1,!1,u.TargetTypeEnum.Variable,n,t,e)},n.prototype.getNamed=function(n,t){return this.getTagged(n,c.NAMED_TAG,t)},n.prototype.getAll=function(n){return this._get(!0,!0,u.TargetTypeEnum.Variable,n)},n.prototype.getAllTagged=function(n,t,e){return this._get(!1,!0,u.TargetTypeEnum.Variable,n,t,e)},n.prototype.getAllNamed=function(n,t){return this.getAllTagged(n,c.NAMED_TAG,t)},n.prototype.resolve=function(n){var t=this.createChild();return t.bind(n).toSelf(),this._appliedMiddleware.forEach((function(n){t.applyMiddleware(n)})),t.get(n)},n.prototype._getContainerModuleHelpersFactory=function(){var n=this,t=function(n,t){n._binding.moduleId=t},e=function(e){return function(r){var i=n.rebind.bind(n)(r);return t(i,e),i}};return function(r){return{bindFunction:(i=r,function(e){var r=n.bind.bind(n)(e);return t(r,i),r}),isboundFunction:function(t){return n.isBound.bind(n)(t)},rebindFunction:e(r),unbindFunction:function(t){n.unbind.bind(n)(t)}};var i}},n.prototype._get=function(n,t,e,r,i,o){var a=null,u={avoidConstraints:n,contextInterceptor:function(n){return n},isMultiInject:t,key:i,serviceIdentifier:r,targetType:e,value:o};if(this._middleware){if(null==(a=this._middleware(u)))throw new Error(s.INVALID_MIDDLEWARE_RETURN)}else a=this._planAndResolve()(u);return a},n.prototype._planAndResolve=function(){var n=this;return function(t){var e=p.plan(n._metadataReader,n,t.isMultiInject,t.targetType,t.serviceIdentifier,t.key,t.value,t.avoidConstraints);return e=t.contextInterceptor(e),f.resolve(e)}},n}();t.Container=v},244:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncContainerModule=t.ContainerModule=void 0;var r=e(791);t.ContainerModule=function(n){this.id=r.id(),this.registry=n};t.AsyncContainerModule=function(n){this.id=r.id(),this.registry=n}},13:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ContainerSnapshot=void 0;var e=function(){function n(){}return n.of=function(t,e){var r=new n;return r.bindings=t,r.middleware=e,r},n}();t.ContainerSnapshot=e},175:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Lookup=void 0;var r=e(674),i=function(){function n(){this._map=new Map}return n.prototype.getMap=function(){return this._map},n.prototype.add=function(n,t){if(null==n)throw new Error(r.NULL_ARGUMENT);if(null==t)throw new Error(r.NULL_ARGUMENT);var e=this._map.get(n);void 0!==e?(e.push(t),this._map.set(n,e)):this._map.set(n,[t])},n.prototype.get=function(n){if(null==n)throw new Error(r.NULL_ARGUMENT);var t=this._map.get(n);if(void 0!==t)return t;throw new Error(r.KEY_NOT_FOUND)},n.prototype.remove=function(n){if(null==n)throw new Error(r.NULL_ARGUMENT);if(!this._map.delete(n))throw new Error(r.KEY_NOT_FOUND)},n.prototype.removeByCondition=function(n){var t=this;this._map.forEach((function(e,r){var i=e.filter((function(t){return!n(t)}));i.length>0?t._map.set(r,i):t._map.delete(r)}))},n.prototype.hasKey=function(n){if(null==n)throw new Error(r.NULL_ARGUMENT);return this._map.has(n)},n.prototype.clone=function(){var t=new n;return this._map.forEach((function(n,e){n.forEach((function(n){return t.add(e,n.clone())}))})),t},n.prototype.traverse=function(n){this._map.forEach((function(t,e){n(e,t)}))},n}();t.Lookup=i},700:(n,t,e)=>{"use strict";t.b2=t.W2=void 0,e(867);var r=e(389);Object.defineProperty(t,"W2",{enumerable:!0,get:function(){return r.Container}});e(421),e(244);var i=e(315);Object.defineProperty(t,"b2",{enumerable:!0,get:function(){return i.injectable}});e(52),e(85),e(744),e(515),e(757),e(693),e(638),e(14),e(377),e(791),e(934),e(758),e(800),e(600)},228:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Context=void 0;var r=e(791),i=function(){function n(n){this.id=r.id(),this.container=n}return n.prototype.addPlan=function(n){this.plan=n},n.prototype.setCurrentRequest=function(n){this.currentRequest=n},n}();t.Context=i},738:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Metadata=void 0;var r=e(867),i=function(){function n(n,t){this.key=n,this.value=t}return n.prototype.toString=function(){return this.key===r.NAMED_TAG?"named: "+this.value.toString()+" ":"tagged: { key:"+this.key.toString()+", value: "+this.value+" }"},n}();t.Metadata=i},377:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MetadataReader=void 0;var r=e(867),i=function(){function n(){}return n.prototype.getConstructorMetadata=function(n){return{compilerGeneratedMetadata:Reflect.getMetadata(r.PARAM_TYPES,n),userGeneratedMetadata:Reflect.getMetadata(r.TAGGED,n)||{}}},n.prototype.getPropertiesMetadata=function(n){return Reflect.getMetadata(r.TAGGED_PROP,n)||[]},n}();t.MetadataReader=i},314:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Plan=void 0;t.Plan=function(n,t){this.parentContext=n,this.rootRequest=t}},311:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBindingDictionary=t.createMockRequest=t.plan=void 0;var r=e(184),i=e(674),o=e(421),a=e(867),s=e(265),u=e(800),c=e(228),l=e(738),p=e(314),f=e(0),d=e(748),h=e(924);function g(n){return n._bindingDictionary}function m(n,t,e,o,a){var s,c=v(e.container,a.serviceIdentifier);return c.length===r.BindingCount.NoBindingsAvailable&&e.container.options.autoBindInjectable&&"function"==typeof a.serviceIdentifier&&n.getConstructorMetadata(a.serviceIdentifier).compilerGeneratedMetadata&&(e.container.bind(a.serviceIdentifier).toSelf(),c=v(e.container,a.serviceIdentifier)),s=t?c:c.filter((function(n){var t=new d.Request(n.serviceIdentifier,e,o,n,a);return n.constraint(t)})),function(n,t,e,o){switch(t.length){case r.BindingCount.NoBindingsAvailable:if(e.isOptional())return t;var a=u.getServiceIdentifierAsString(n),s=i.NOT_REGISTERED;throw s+=u.listMetadataForTarget(a,e),s+=u.listRegisteredBindingsForServiceIdentifier(o,a,v),new Error(s);case r.BindingCount.OnlyOneBindingAvailable:if(!e.isArray())return t;case r.BindingCount.MultipleBindingsAvailable:default:if(e.isArray())return t;throw a=u.getServiceIdentifierAsString(n),s=i.AMBIGUOUS_MATCH+" "+a,s+=u.listRegisteredBindingsForServiceIdentifier(o,a,v),new Error(s)}}(a.serviceIdentifier,s,a,e.container),s}function y(n,t,e,r,a,s){var u,c;if(null===a){u=m(n,t,r,null,s),c=new d.Request(e,r,null,u,s);var l=new p.Plan(r,c);r.addPlan(l)}else u=m(n,t,r,a,s),c=a.addChildRequest(s.serviceIdentifier,u,s);u.forEach((function(t){var e=null;if(s.isArray())e=c.addChildRequest(t.serviceIdentifier,t,s);else{if(t.cache)return;e=c}if(t.type===o.BindingTypeEnum.Instance&&null!==t.implementationType){var a=f.getDependencies(n,t.implementationType);if(!r.container.options.skipBaseClassChecks){var u=f.getBaseClassDependencyCount(n,t.implementationType);if(a.length<u){var l=i.ARGUMENTS_LENGTH_MISMATCH(f.getFunctionName(t.implementationType));throw new Error(l)}}a.forEach((function(t){y(n,!1,t.serviceIdentifier,r,e,t)}))}}))}function v(n,t){var e=[],r=g(n);return r.hasKey(t)?e=r.get(t):null!==n.parent&&(e=v(n.parent,t)),e}t.getBindingDictionary=g,t.plan=function(n,t,e,r,i,o,p,f){void 0===f&&(f=!1);var d=new c.Context(t),g=function(n,t,e,r,i,o){var s=n?a.MULTI_INJECT_TAG:a.INJECT_TAG,u=new l.Metadata(s,e),c=new h.Target(t,"",e,u);if(void 0!==i){var p=new l.Metadata(i,o);c.metadata.push(p)}return c}(e,r,i,0,o,p);try{return y(n,f,i,d,null,g),d}catch(n){throw s.isStackOverflowExeption(n)&&d.plan&&u.circularDependencyToException(d.plan.rootRequest),n}},t.createMockRequest=function(n,t,e,r){var i=new h.Target(o.TargetTypeEnum.Variable,"",t,new l.Metadata(e,r)),a=new c.Context(n);return new d.Request(t,a,null,[],i)}},460:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.QueryableString=void 0;var e=function(){function n(n){this.str=n}return n.prototype.startsWith=function(n){return 0===this.str.indexOf(n)},n.prototype.endsWith=function(n){var t,e=n.split("").reverse().join("");return t=this.str.split("").reverse().join(""),this.startsWith.call({str:t},e)},n.prototype.contains=function(n){return-1!==this.str.indexOf(n)},n.prototype.equals=function(n){return this.str===n},n.prototype.value=function(){return this.str},n}();t.QueryableString=e},0:function(n,t,e){"use strict";var r=this&&this.__spreadArray||function(n,t){for(var e=0,r=t.length,i=n.length;e<r;e++,i++)n[i]=t[e];return n};Object.defineProperty(t,"__esModule",{value:!0}),t.getFunctionName=t.getBaseClassDependencyCount=t.getDependencies=void 0;var i=e(744),o=e(674),a=e(421),s=e(867),u=e(800);Object.defineProperty(t,"getFunctionName",{enumerable:!0,get:function(){return u.getFunctionName}});var c=e(924);function l(n,t,e,i){var a=n.getConstructorMetadata(e),s=a.compilerGeneratedMetadata;if(void 0===s){var u=o.MISSING_INJECTABLE_ANNOTATION+" "+t+".";throw new Error(u)}var c=a.userGeneratedMetadata,l=Object.keys(c),d=0===e.length&&l.length>0,h=l.length>e.length,g=function(n,t,e,r,i){for(var o=[],a=0;a<i;a++){var s=p(a,n,t,e,r);null!==s&&o.push(s)}return o}(i,t,s,c,d||h?l.length:e.length),m=f(n,e);return r(r([],g),m)}function p(n,t,e,r,s){var u=s[n.toString()]||[],l=d(u),p=!0!==l.unmanaged,f=r[n];if((f=l.inject||l.multiInject||f)instanceof i.LazyServiceIdentifer&&(f=f.unwrap()),p){if(!t&&(f===Object||f===Function||void 0===f)){var h=o.MISSING_INJECT_ANNOTATION+" argument "+n+" in class "+e+".";throw new Error(h)}var g=new c.Target(a.TargetTypeEnum.ConstructorArgument,l.targetName,f);return g.metadata=u,g}return null}function f(n,t){for(var e=n.getPropertiesMetadata(t),i=[],o=0,s=Object.keys(e);o<s.length;o++){var u=s[o],l=e[u],p=d(e[u]),h=p.targetName||u,g=p.inject||p.multiInject,m=new c.Target(a.TargetTypeEnum.ClassProperty,h,g);m.metadata=l,i.push(m)}var y=Object.getPrototypeOf(t.prototype).constructor;if(y!==Object){var v=f(n,y);i=r(r([],i),v)}return i}function d(n){var t={};return n.forEach((function(n){t[n.key.toString()]=n.value})),{inject:t[s.INJECT_TAG],multiInject:t[s.MULTI_INJECT_TAG],targetName:t[s.NAME_TAG],unmanaged:t[s.UNMANAGED_TAG]}}t.getDependencies=function(n,t){return l(n,u.getFunctionName(t),t,!1)},t.getBaseClassDependencyCount=function n(t,e){var r=Object.getPrototypeOf(e.prototype).constructor;if(r!==Object){var i=l(t,u.getFunctionName(r),r,!0),o=i.map((function(n){return n.metadata.filter((function(n){return n.key===s.UNMANAGED_TAG}))})),a=[].concat.apply([],o).length,c=i.length-a;return c>0?c:n(t,r)}return 0}},748:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Request=void 0;var r=e(791),i=function(){function n(n,t,e,i,o){this.id=r.id(),this.serviceIdentifier=n,this.parentContext=t,this.parentRequest=e,this.target=o,this.childRequests=[],this.bindings=Array.isArray(i)?i:[i],this.requestScope=null===e?new Map:null}return n.prototype.addChildRequest=function(t,e,r){var i=new n(t,this.parentContext,this,e,r);return this.childRequests.push(i),i},n}();t.Request=i},924:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Target=void 0;var r=e(867),i=e(791),o=e(738),a=e(460),s=function(){function n(n,t,e,s){this.id=i.id(),this.type=n,this.serviceIdentifier=e,this.name=new a.QueryableString(t||""),this.metadata=new Array;var u=null;"string"==typeof s?u=new o.Metadata(r.NAMED_TAG,s):s instanceof o.Metadata&&(u=s),null!==u&&this.metadata.push(u)}return n.prototype.hasTag=function(n){for(var t=0,e=this.metadata;t<e.length;t++)if(e[t].key===n)return!0;return!1},n.prototype.isArray=function(){return this.hasTag(r.MULTI_INJECT_TAG)},n.prototype.matchesArray=function(n){return this.matchesTag(r.MULTI_INJECT_TAG)(n)},n.prototype.isNamed=function(){return this.hasTag(r.NAMED_TAG)},n.prototype.isTagged=function(){return this.metadata.some((function(n){return r.NON_CUSTOM_TAG_KEYS.every((function(t){return n.key!==t}))}))},n.prototype.isOptional=function(){return this.matchesTag(r.OPTIONAL_TAG)(!0)},n.prototype.getNamedTag=function(){return this.isNamed()?this.metadata.filter((function(n){return n.key===r.NAMED_TAG}))[0]:null},n.prototype.getCustomTags=function(){return this.isTagged()?this.metadata.filter((function(n){return r.NON_CUSTOM_TAG_KEYS.every((function(t){return n.key!==t}))})):null},n.prototype.matchesNamedTag=function(n){return this.matchesTag(r.NAMED_TAG)(n)},n.prototype.matchesTag=function(n){var t=this;return function(e){for(var r=0,i=t.metadata;r<i.length;r++){var o=i[r];if(o.key===n&&o.value===e)return!0}return!1}},n}();t.Target=s},279:function(n,t,e){"use strict";var r=this&&this.__spreadArray||function(n,t){for(var e=0,r=t.length,i=n.length;e<r;e++,i++)n[i]=t[e];return n};Object.defineProperty(t,"__esModule",{value:!0}),t.resolveInstance=void 0;var i=e(674),o=e(421),a=e(867);t.resolveInstance=function(n,t,e){var s,u,c=null;t.length>0?(u=t.filter((function(n){return null!==n.target&&n.target.type===o.TargetTypeEnum.ConstructorArgument})).map(e),c=function(n,t,e){var r=t.filter((function(n){return null!==n.target&&n.target.type===o.TargetTypeEnum.ClassProperty})),i=r.map(e);return r.forEach((function(t,e){var r;r=t.target.name.value();var o=i[e];n[r]=o})),n}(c=new((s=n).bind.apply(s,r([void 0],u))),t,e)):c=new n;return function(n,t){if(Reflect.hasMetadata(a.POST_CONSTRUCT,n)){var e=Reflect.getMetadata(a.POST_CONSTRUCT,n);try{t[e.value]()}catch(t){throw new Error(i.POST_CONSTRUCT_ERROR(n.name,t.message))}}}(n,c),c}},927:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resolve=void 0;var r=e(674),i=e(421),o=e(265),a=e(800),s=e(279),u=function(n,t,e){try{return e()}catch(e){throw o.isStackOverflowExeption(e)?new Error(r.CIRCULAR_DEPENDENCY_IN_FACTORY(n,t.toString())):e}},c=function(n){return function(t){t.parentContext.setCurrentRequest(t);var e=t.bindings,o=t.childRequests,l=t.target&&t.target.isArray(),p=!(t.parentRequest&&t.parentRequest.target&&t.target&&t.parentRequest.target.matchesArray(t.target.serviceIdentifier));if(l&&p)return o.map((function(t){return c(n)(t)}));var f=null;if(!t.target.isOptional()||0!==e.length){var d=e[0],h=d.scope===i.BindingScopeEnum.Singleton,g=d.scope===i.BindingScopeEnum.Request;if(h&&d.activated)return d.cache;if(g&&null!==n&&n.has(d.id))return n.get(d.id);if(d.type===i.BindingTypeEnum.ConstantValue)f=d.cache,d.activated=!0;else if(d.type===i.BindingTypeEnum.Function)f=d.cache,d.activated=!0;else if(d.type===i.BindingTypeEnum.Constructor)f=d.implementationType;else if(d.type===i.BindingTypeEnum.DynamicValue&&null!==d.dynamicValue)f=u("toDynamicValue",d.serviceIdentifier,(function(){return d.dynamicValue(t.parentContext)}));else if(d.type===i.BindingTypeEnum.Factory&&null!==d.factory)f=u("toFactory",d.serviceIdentifier,(function(){return d.factory(t.parentContext)}));else if(d.type===i.BindingTypeEnum.Provider&&null!==d.provider)f=u("toProvider",d.serviceIdentifier,(function(){return d.provider(t.parentContext)}));else{if(d.type!==i.BindingTypeEnum.Instance||null===d.implementationType){var m=a.getServiceIdentifierAsString(t.serviceIdentifier);throw new Error(r.INVALID_BINDING_TYPE+" "+m)}f=s.resolveInstance(d.implementationType,o,c(n))}return"function"==typeof d.onActivation&&(f=d.onActivation(t.parentContext,f)),h&&(d.cache=f,d.activated=!0),g&&null!==n&&!n.has(d.id)&&n.set(d.id,f),f}}};t.resolve=function(n){return c(n.plan.rootRequest.requestScope)(n.plan.rootRequest)}},366:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingInSyntax=void 0;var r=e(421),i=e(325),o=function(){function n(n){this._binding=n}return n.prototype.inRequestScope=function(){return this._binding.scope=r.BindingScopeEnum.Request,new i.BindingWhenOnSyntax(this._binding)},n.prototype.inSingletonScope=function(){return this._binding.scope=r.BindingScopeEnum.Singleton,new i.BindingWhenOnSyntax(this._binding)},n.prototype.inTransientScope=function(){return this._binding.scope=r.BindingScopeEnum.Transient,new i.BindingWhenOnSyntax(this._binding)},n}();t.BindingInSyntax=o},812:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingInWhenOnSyntax=void 0;var r=e(366),i=e(811),o=e(370),a=function(){function n(n){this._binding=n,this._bindingWhenSyntax=new o.BindingWhenSyntax(this._binding),this._bindingOnSyntax=new i.BindingOnSyntax(this._binding),this._bindingInSyntax=new r.BindingInSyntax(n)}return n.prototype.inRequestScope=function(){return this._bindingInSyntax.inRequestScope()},n.prototype.inSingletonScope=function(){return this._bindingInSyntax.inSingletonScope()},n.prototype.inTransientScope=function(){return this._bindingInSyntax.inTransientScope()},n.prototype.when=function(n){return this._bindingWhenSyntax.when(n)},n.prototype.whenTargetNamed=function(n){return this._bindingWhenSyntax.whenTargetNamed(n)},n.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},n.prototype.whenTargetTagged=function(n,t){return this._bindingWhenSyntax.whenTargetTagged(n,t)},n.prototype.whenInjectedInto=function(n){return this._bindingWhenSyntax.whenInjectedInto(n)},n.prototype.whenParentNamed=function(n){return this._bindingWhenSyntax.whenParentNamed(n)},n.prototype.whenParentTagged=function(n,t){return this._bindingWhenSyntax.whenParentTagged(n,t)},n.prototype.whenAnyAncestorIs=function(n){return this._bindingWhenSyntax.whenAnyAncestorIs(n)},n.prototype.whenNoAncestorIs=function(n){return this._bindingWhenSyntax.whenNoAncestorIs(n)},n.prototype.whenAnyAncestorNamed=function(n){return this._bindingWhenSyntax.whenAnyAncestorNamed(n)},n.prototype.whenAnyAncestorTagged=function(n,t){return this._bindingWhenSyntax.whenAnyAncestorTagged(n,t)},n.prototype.whenNoAncestorNamed=function(n){return this._bindingWhenSyntax.whenNoAncestorNamed(n)},n.prototype.whenNoAncestorTagged=function(n,t){return this._bindingWhenSyntax.whenNoAncestorTagged(n,t)},n.prototype.whenAnyAncestorMatches=function(n){return this._bindingWhenSyntax.whenAnyAncestorMatches(n)},n.prototype.whenNoAncestorMatches=function(n){return this._bindingWhenSyntax.whenNoAncestorMatches(n)},n.prototype.onActivation=function(n){return this._bindingOnSyntax.onActivation(n)},n}();t.BindingInWhenOnSyntax=a},811:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingOnSyntax=void 0;var r=e(370),i=function(){function n(n){this._binding=n}return n.prototype.onActivation=function(n){return this._binding.onActivation=n,new r.BindingWhenSyntax(this._binding)},n}();t.BindingOnSyntax=i},860:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingToSyntax=void 0;var r=e(674),i=e(421),o=e(812),a=e(325),s=function(){function n(n){this._binding=n}return n.prototype.to=function(n){return this._binding.type=i.BindingTypeEnum.Instance,this._binding.implementationType=n,new o.BindingInWhenOnSyntax(this._binding)},n.prototype.toSelf=function(){if("function"!=typeof this._binding.serviceIdentifier)throw new Error(""+r.INVALID_TO_SELF_VALUE);var n=this._binding.serviceIdentifier;return this.to(n)},n.prototype.toConstantValue=function(n){return this._binding.type=i.BindingTypeEnum.ConstantValue,this._binding.cache=n,this._binding.dynamicValue=null,this._binding.implementationType=null,this._binding.scope=i.BindingScopeEnum.Singleton,new a.BindingWhenOnSyntax(this._binding)},n.prototype.toDynamicValue=function(n){return this._binding.type=i.BindingTypeEnum.DynamicValue,this._binding.cache=null,this._binding.dynamicValue=n,this._binding.implementationType=null,new o.BindingInWhenOnSyntax(this._binding)},n.prototype.toConstructor=function(n){return this._binding.type=i.BindingTypeEnum.Constructor,this._binding.implementationType=n,this._binding.scope=i.BindingScopeEnum.Singleton,new a.BindingWhenOnSyntax(this._binding)},n.prototype.toFactory=function(n){return this._binding.type=i.BindingTypeEnum.Factory,this._binding.factory=n,this._binding.scope=i.BindingScopeEnum.Singleton,new a.BindingWhenOnSyntax(this._binding)},n.prototype.toFunction=function(n){if("function"!=typeof n)throw new Error(r.INVALID_FUNCTION_BINDING);var t=this.toConstantValue(n);return this._binding.type=i.BindingTypeEnum.Function,this._binding.scope=i.BindingScopeEnum.Singleton,t},n.prototype.toAutoFactory=function(n){return this._binding.type=i.BindingTypeEnum.Factory,this._binding.factory=function(t){return function(){return t.container.get(n)}},this._binding.scope=i.BindingScopeEnum.Singleton,new a.BindingWhenOnSyntax(this._binding)},n.prototype.toProvider=function(n){return this._binding.type=i.BindingTypeEnum.Provider,this._binding.provider=n,this._binding.scope=i.BindingScopeEnum.Singleton,new a.BindingWhenOnSyntax(this._binding)},n.prototype.toService=function(n){this.toDynamicValue((function(t){return t.container.get(n)}))},n}();t.BindingToSyntax=s},325:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingWhenOnSyntax=void 0;var r=e(811),i=e(370),o=function(){function n(n){this._binding=n,this._bindingWhenSyntax=new i.BindingWhenSyntax(this._binding),this._bindingOnSyntax=new r.BindingOnSyntax(this._binding)}return n.prototype.when=function(n){return this._bindingWhenSyntax.when(n)},n.prototype.whenTargetNamed=function(n){return this._bindingWhenSyntax.whenTargetNamed(n)},n.prototype.whenTargetIsDefault=function(){return this._bindingWhenSyntax.whenTargetIsDefault()},n.prototype.whenTargetTagged=function(n,t){return this._bindingWhenSyntax.whenTargetTagged(n,t)},n.prototype.whenInjectedInto=function(n){return this._bindingWhenSyntax.whenInjectedInto(n)},n.prototype.whenParentNamed=function(n){return this._bindingWhenSyntax.whenParentNamed(n)},n.prototype.whenParentTagged=function(n,t){return this._bindingWhenSyntax.whenParentTagged(n,t)},n.prototype.whenAnyAncestorIs=function(n){return this._bindingWhenSyntax.whenAnyAncestorIs(n)},n.prototype.whenNoAncestorIs=function(n){return this._bindingWhenSyntax.whenNoAncestorIs(n)},n.prototype.whenAnyAncestorNamed=function(n){return this._bindingWhenSyntax.whenAnyAncestorNamed(n)},n.prototype.whenAnyAncestorTagged=function(n,t){return this._bindingWhenSyntax.whenAnyAncestorTagged(n,t)},n.prototype.whenNoAncestorNamed=function(n){return this._bindingWhenSyntax.whenNoAncestorNamed(n)},n.prototype.whenNoAncestorTagged=function(n,t){return this._bindingWhenSyntax.whenNoAncestorTagged(n,t)},n.prototype.whenAnyAncestorMatches=function(n){return this._bindingWhenSyntax.whenAnyAncestorMatches(n)},n.prototype.whenNoAncestorMatches=function(n){return this._bindingWhenSyntax.whenNoAncestorMatches(n)},n.prototype.onActivation=function(n){return this._bindingOnSyntax.onActivation(n)},n}();t.BindingWhenOnSyntax=o},370:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindingWhenSyntax=void 0;var r=e(811),i=e(758),o=function(){function n(n){this._binding=n}return n.prototype.when=function(n){return this._binding.constraint=n,new r.BindingOnSyntax(this._binding)},n.prototype.whenTargetNamed=function(n){return this._binding.constraint=i.namedConstraint(n),new r.BindingOnSyntax(this._binding)},n.prototype.whenTargetIsDefault=function(){return this._binding.constraint=function(n){return null!==n.target&&!n.target.isNamed()&&!n.target.isTagged()},new r.BindingOnSyntax(this._binding)},n.prototype.whenTargetTagged=function(n,t){return this._binding.constraint=i.taggedConstraint(n)(t),new r.BindingOnSyntax(this._binding)},n.prototype.whenInjectedInto=function(n){return this._binding.constraint=function(t){return i.typeConstraint(n)(t.parentRequest)},new r.BindingOnSyntax(this._binding)},n.prototype.whenParentNamed=function(n){return this._binding.constraint=function(t){return i.namedConstraint(n)(t.parentRequest)},new r.BindingOnSyntax(this._binding)},n.prototype.whenParentTagged=function(n,t){return this._binding.constraint=function(e){return i.taggedConstraint(n)(t)(e.parentRequest)},new r.BindingOnSyntax(this._binding)},n.prototype.whenAnyAncestorIs=function(n){return this._binding.constraint=function(t){return i.traverseAncerstors(t,i.typeConstraint(n))},new r.BindingOnSyntax(this._binding)},n.prototype.whenNoAncestorIs=function(n){return this._binding.constraint=function(t){return!i.traverseAncerstors(t,i.typeConstraint(n))},new r.BindingOnSyntax(this._binding)},n.prototype.whenAnyAncestorNamed=function(n){return this._binding.constraint=function(t){return i.traverseAncerstors(t,i.namedConstraint(n))},new r.BindingOnSyntax(this._binding)},n.prototype.whenNoAncestorNamed=function(n){return this._binding.constraint=function(t){return!i.traverseAncerstors(t,i.namedConstraint(n))},new r.BindingOnSyntax(this._binding)},n.prototype.whenAnyAncestorTagged=function(n,t){return this._binding.constraint=function(e){return i.traverseAncerstors(e,i.taggedConstraint(n)(t))},new r.BindingOnSyntax(this._binding)},n.prototype.whenNoAncestorTagged=function(n,t){return this._binding.constraint=function(e){return!i.traverseAncerstors(e,i.taggedConstraint(n)(t))},new r.BindingOnSyntax(this._binding)},n.prototype.whenAnyAncestorMatches=function(n){return this._binding.constraint=function(t){return i.traverseAncerstors(t,n)},new r.BindingOnSyntax(this._binding)},n.prototype.whenNoAncestorMatches=function(n){return this._binding.constraint=function(t){return!i.traverseAncerstors(t,n)},new r.BindingOnSyntax(this._binding)},n}();t.BindingWhenSyntax=o},758:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.typeConstraint=t.namedConstraint=t.taggedConstraint=t.traverseAncerstors=void 0;var r=e(867),i=e(738),o=function(n,t){var e=n.parentRequest;return null!==e&&(!!t(e)||o(e,t))};t.traverseAncerstors=o;var a=function(n){return function(t){var e=function(e){return null!==e&&null!==e.target&&e.target.matchesTag(n)(t)};return e.metaData=new i.Metadata(n,t),e}};t.taggedConstraint=a;var s=a(r.NAMED_TAG);t.namedConstraint=s,t.typeConstraint=function(n){return function(t){var e=null;if(null!==t){if(e=t.bindings[0],"string"==typeof n)return e.serviceIdentifier===n;var r=t.bindings[0].implementationType;return n===r}return!1}}},600:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiBindToService=void 0,t.multiBindToService=function(n){return function(t){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return e.forEach((function(e){return n.bind(e).toService(t)}))}}}},265:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isStackOverflowExeption=void 0;var r=e(674);t.isStackOverflowExeption=function(n){return n instanceof RangeError||n.message===r.STACK_OVERFLOW}},791:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.id=void 0;var e=0;t.id=function(){return e++}},800:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.circularDependencyToException=t.listMetadataForTarget=t.listRegisteredBindingsForServiceIdentifier=t.getServiceIdentifierAsString=t.getFunctionName=void 0;var r=e(674);function i(n){return"function"==typeof n?n.name:"symbol"==typeof n?n.toString():n}function o(n,t){return null!==n.parentRequest&&(n.parentRequest.serviceIdentifier===t||o(n.parentRequest,t))}function a(n){if(n.name)return n.name;var t=n.toString(),e=t.match(/^function\s*([^\s(]+)/);return e?e[1]:"Anonymous function: "+t}t.getServiceIdentifierAsString=i,t.listRegisteredBindingsForServiceIdentifier=function(n,t,e){var r="",i=e(n,t);return 0!==i.length&&(r="\nRegistered bindings:",i.forEach((function(n){var t="Object";null!==n.implementationType&&(t=a(n.implementationType)),r=r+"\n "+t,n.constraint.metaData&&(r=r+" - "+n.constraint.metaData)}))),r},t.circularDependencyToException=function n(t){t.childRequests.forEach((function(t){if(o(t,t.serviceIdentifier)){var e=function(n){return function n(t,e){void 0===e&&(e=[]);var r=i(t.serviceIdentifier);return e.push(r),null!==t.parentRequest?n(t.parentRequest,e):e}(n).reverse().join(" --\x3e ")}(t);throw new Error(r.CIRCULAR_DEPENDENCY+" "+e)}n(t)}))},t.listMetadataForTarget=function(n,t){if(t.isTagged()||t.isNamed()){var e="",r=t.getNamedTag(),i=t.getCustomTags();return null!==r&&(e+=r.toString()+"\n"),null!==i&&i.forEach((function(n){e+=n.toString()+"\n"}))," "+n+"\n "+n+" - "+e}return" "+n},t.getFunctionName=a},660:(n,t,e)=>{var r;!function(n){!function(t){var r="object"==typeof e.g?e.g:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),i=o(n);function o(n,t){return function(e,r){"function"!=typeof n[e]&&Object.defineProperty(n,e,{configurable:!0,writable:!0,value:r}),t&&t(e,r)}}void 0===r.Reflect?r.Reflect=n:i=o(r.Reflect,i),function(n){var t=Object.prototype.hasOwnProperty,e="function"==typeof Symbol,r=e&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",i=e&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",o="function"==typeof Object.create,a={__proto__:[]}instanceof Array,s=!o&&!a,u={create:o?function(){return B(Object.create(null))}:a?function(){return B({__proto__:null})}:function(){return B({})},has:s?function(n,e){return t.call(n,e)}:function(n,t){return t in n},get:s?function(n,e){return t.call(n,e)?n[e]:void 0}:function(n,t){return n[t]}},c=Object.getPrototypeOf(Function),l="object"==typeof process&&process.env&&"true"===process.env.REFLECT_METADATA_USE_MAP_POLYFILL,p=l||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var n={},t=[],e=function(){function n(n,t,e){this._index=0,this._keys=n,this._values=t,this._selector=e}return n.prototype["@@iterator"]=function(){return this},n.prototype[i]=function(){return this},n.prototype.next=function(){var n=this._index;if(n>=0&&n<this._keys.length){var e=this._selector(this._keys[n],this._values[n]);return n+1>=this._keys.length?(this._index=-1,this._keys=t,this._values=t):this._index++,{value:e,done:!1}}return{value:void 0,done:!0}},n.prototype.throw=function(n){throw this._index>=0&&(this._index=-1,this._keys=t,this._values=t),n},n.prototype.return=function(n){return this._index>=0&&(this._index=-1,this._keys=t,this._values=t),{value:n,done:!0}},n}();return function(){function t(){this._keys=[],this._values=[],this._cacheKey=n,this._cacheIndex=-2}return Object.defineProperty(t.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),t.prototype.has=function(n){return this._find(n,!1)>=0},t.prototype.get=function(n){var t=this._find(n,!1);return t>=0?this._values[t]:void 0},t.prototype.set=function(n,t){var e=this._find(n,!0);return this._values[e]=t,this},t.prototype.delete=function(t){var e=this._find(t,!1);if(e>=0){for(var r=this._keys.length,i=e+1;i<r;i++)this._keys[i-1]=this._keys[i],this._values[i-1]=this._values[i];return this._keys.length--,this._values.length--,t===this._cacheKey&&(this._cacheKey=n,this._cacheIndex=-2),!0}return!1},t.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=n,this._cacheIndex=-2},t.prototype.keys=function(){return new e(this._keys,this._values,r)},t.prototype.values=function(){return new e(this._keys,this._values,o)},t.prototype.entries=function(){return new e(this._keys,this._values,a)},t.prototype["@@iterator"]=function(){return this.entries()},t.prototype[i]=function(){return this.entries()},t.prototype._find=function(n,t){return this._cacheKey!==n&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=n)),this._cacheIndex<0&&t&&(this._cacheIndex=this._keys.length,this._keys.push(n),this._values.push(void 0)),this._cacheIndex},t}();function r(n,t){return n}function o(n,t){return t}function a(n,t){return[n,t]}}():Map,f=l||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function n(){this._map=new p}return Object.defineProperty(n.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),n.prototype.has=function(n){return this._map.has(n)},n.prototype.add=function(n){return this._map.set(n,n),this},n.prototype.delete=function(n){return this._map.delete(n)},n.prototype.clear=function(){this._map.clear()},n.prototype.keys=function(){return this._map.keys()},n.prototype.values=function(){return this._map.values()},n.prototype.entries=function(){return this._map.entries()},n.prototype["@@iterator"]=function(){return this.keys()},n.prototype[i]=function(){return this.keys()},n}():Set,d=new(l||"function"!=typeof WeakMap?function(){var n=u.create(),e=r();return function(){function n(){this._key=r()}return n.prototype.has=function(n){var t=i(n,!1);return void 0!==t&&u.has(t,this._key)},n.prototype.get=function(n){var t=i(n,!1);return void 0!==t?u.get(t,this._key):void 0},n.prototype.set=function(n,t){return i(n,!0)[this._key]=t,this},n.prototype.delete=function(n){var t=i(n,!1);return void 0!==t&&delete t[this._key]},n.prototype.clear=function(){this._key=r()},n}();function r(){var t;do{t="@@WeakMap@@"+a()}while(u.has(n,t));return n[t]=!0,t}function i(n,r){if(!t.call(n,e)){if(!r)return;Object.defineProperty(n,e,{value:u.create()})}return n[e]}function o(n,t){for(var e=0;e<t;++e)n[e]=255*Math.random()|0;return n}function a(){var n,t=(n=16,"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(n)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(n)):o(new Uint8Array(n),n):o(new Array(n),n));t[6]=79&t[6]|64,t[8]=191&t[8]|128;for(var e="",r=0;r<16;++r){var i=t[r];4!==r&&6!==r&&8!==r||(e+="-"),i<16&&(e+="0"),e+=i.toString(16).toLowerCase()}return e}}():WeakMap);function h(n,t,e){var r=d.get(n);if(T(r)){if(!e)return;r=new p,d.set(n,r)}var i=r.get(t);if(T(i)){if(!e)return;i=new p,r.set(t,i)}return i}function g(n,t,e){if(m(n,t,e))return!0;var r=R(t);return!A(r)&&g(n,r,e)}function m(n,t,e){var r=h(t,e,!1);return!T(r)&&!!r.has(n)}function y(n,t,e){if(m(n,t,e))return v(n,t,e);var r=R(t);return A(r)?void 0:y(n,r,e)}function v(n,t,e){var r=h(t,e,!1);if(!T(r))return r.get(n)}function b(n,t,e,r){h(e,r,!0).set(n,t)}function _(n,t){var e=x(n,t),r=R(n);if(null===r)return e;var i=_(r,t);if(i.length<=0)return e;if(e.length<=0)return i;for(var o=new f,a=[],s=0,u=e;s<u.length;s++){var c=u[s];o.has(c)||(o.add(c),a.push(c))}for(var l=0,p=i;l<p.length;l++)c=p[l],o.has(c)||(o.add(c),a.push(c));return a}function x(n,t){var e=[],r=h(n,t,!1);if(T(r))return e;for(var o=function(n){var t=k(n,i);if(!O(t))throw new TypeError;var e=t.call(n);if(!S(e))throw new TypeError;return e}(r.keys()),a=0;;){var s=M(o);if(!s)return e.length=a,e;var u=s.value;try{e[a]=u}catch(n){try{P(o)}finally{throw n}}a++}}function w(n){if(null===n)return 1;switch(typeof n){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===n?1:6;default:return 6}}function T(n){return void 0===n}function A(n){return null===n}function S(n){return"object"==typeof n?null!==n:"function"==typeof n}function E(n,t){switch(w(n)){case 0:case 1:case 2:case 3:case 4:case 5:return n}var e=3===t?"string":5===t?"number":"default",i=k(n,r);if(void 0!==i){var o=i.call(n,e);if(S(o))throw new TypeError;return o}return function(n,t){if("string"===t){var e=n.toString;if(O(e)&&!S(i=e.call(n)))return i;if(O(r=n.valueOf)&&!S(i=r.call(n)))return i}else{var r;if(O(r=n.valueOf)&&!S(i=r.call(n)))return i;var i,o=n.toString;if(O(o)&&!S(i=o.call(n)))return i}throw new TypeError}(n,"default"===e?"number":e)}function N(n){var t=E(n,3);return"symbol"==typeof t?t:function(n){return""+n}(t)}function I(n){return Array.isArray?Array.isArray(n):n instanceof Object?n instanceof Array:"[object Array]"===Object.prototype.toString.call(n)}function O(n){return"function"==typeof n}function C(n){return"function"==typeof n}function k(n,t){var e=n[t];if(null!=e){if(!O(e))throw new TypeError;return e}}function M(n){var t=n.next();return!t.done&&t}function P(n){var t=n.return;t&&t.call(n)}function R(n){var t=Object.getPrototypeOf(n);if("function"!=typeof n||n===c)return t;if(t!==c)return t;var e=n.prototype,r=e&&Object.getPrototypeOf(e);if(null==r||r===Object.prototype)return t;var i=r.constructor;return"function"!=typeof i||i===n?t:i}function B(n){return n.__=void 0,delete n.__,n}n("decorate",(function(n,t,e,r){if(T(e)){if(!I(n))throw new TypeError;if(!C(t))throw new TypeError;return function(n,t){for(var e=n.length-1;e>=0;--e){var r=(0,n[e])(t);if(!T(r)&&!A(r)){if(!C(r))throw new TypeError;t=r}}return t}(n,t)}if(!I(n))throw new TypeError;if(!S(t))throw new TypeError;if(!S(r)&&!T(r)&&!A(r))throw new TypeError;return A(r)&&(r=void 0),function(n,t,e,r){for(var i=n.length-1;i>=0;--i){var o=(0,n[i])(t,e,r);if(!T(o)&&!A(o)){if(!S(o))throw new TypeError;r=o}}return r}(n,t,e=N(e),r)})),n("metadata",(function(n,t){return function(e,r){if(!S(e))throw new TypeError;if(!T(r)&&!function(n){switch(w(n)){case 3:case 4:return!0;default:return!1}}(r))throw new TypeError;b(n,t,e,r)}})),n("defineMetadata",(function(n,t,e,r){if(!S(e))throw new TypeError;return T(r)||(r=N(r)),b(n,t,e,r)})),n("hasMetadata",(function(n,t,e){if(!S(t))throw new TypeError;return T(e)||(e=N(e)),g(n,t,e)})),n("hasOwnMetadata",(function(n,t,e){if(!S(t))throw new TypeError;return T(e)||(e=N(e)),m(n,t,e)})),n("getMetadata",(function(n,t,e){if(!S(t))throw new TypeError;return T(e)||(e=N(e)),y(n,t,e)})),n("getOwnMetadata",(function(n,t,e){if(!S(t))throw new TypeError;return T(e)||(e=N(e)),v(n,t,e)})),n("getMetadataKeys",(function(n,t){if(!S(n))throw new TypeError;return T(t)||(t=N(t)),_(n,t)})),n("getOwnMetadataKeys",(function(n,t){if(!S(n))throw new TypeError;return T(t)||(t=N(t)),x(n,t)})),n("deleteMetadata",(function(n,t,e){if(!S(t))throw new TypeError;T(e)||(e=N(e));var r=h(t,e,!1);if(T(r))return!1;if(!r.delete(n))return!1;if(r.size>0)return!0;var i=d.get(t);return i.delete(e),i.size>0||d.delete(t),!0}))}(i)}()}(r||(r={}))},379:(n,t,e)=>{"use strict";var r,i=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}(),o=[];function a(n){for(var t=-1,e=0;e<o.length;e++)if(o[e].identifier===n){t=e;break}return t}function s(n,t){for(var e={},r=[],i=0;i<n.length;i++){var s=n[i],u=t.base?s[0]+t.base:s[0],c=e[u]||0,l="".concat(u," ").concat(c);e[u]=c+1;var p=a(l),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==p?(o[p].references++,o[p].updater(f)):o.push({identifier:l,updater:g(f,t),references:1}),r.push(l)}return r}function u(n){var t=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=e.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){t.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(t);else{var a=i(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,l=(c=[],function(n,t){return c[n]=t,c.filter(Boolean).join("\n")});function p(n,t,e,r){var i=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=l(t,i);else{var o=document.createTextNode(i),a=n.childNodes;a[t]&&n.removeChild(a[t]),a.length?n.insertBefore(o,a[t]):n.appendChild(o)}}function f(n,t,e){var r=e.css,i=e.media,o=e.sourceMap;if(i?n.setAttribute("media",i):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var d=null,h=0;function g(n,t){var e,r,i;if(t.singleton){var o=h++;e=d||(d=u(t)),r=p.bind(null,e,o,!1),i=p.bind(null,e,o,!0)}else e=u(t),r=f.bind(null,e,t),i=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else i()}}n.exports=function(n,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var e=s(n=n||[],t);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<e.length;r++){var i=a(e[r]);o[i].references--}for(var u=s(n,t),c=0;c<e.length;c++){var l=a(e[c]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}e=u}}}}},t={};function e(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{"use strict";var n=e(379),t=e.n(n),r=e(111);t()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var i=e(259);function o(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}t()(i.Z,{insert:"head",singleton:!1}),i.Z.locals;var a=function(){function n(t,e){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this._position=void 0,this._value=void 0,this._previousPosition=void 0,this._x=void 0,this._y=void 0,this._mergedFrom=void 0,this.x=t.x,this.y=t.y,this.value=e||2,this.previousPosition=null,this.mergedFrom=null}var t,e;return t=n,(e=[{key:"savePosition",value:function(){this.previousPosition={x:this.x,y:this.y}}},{key:"updatePosition",value:function(n){this.x=n.x,this.y=n.y}},{key:"serialize",value:function(){return{position:{x:this.x,y:this.y},value:this.value}}},{key:"position",get:function(){return this._position},set:function(n){this._position=n}},{key:"value",get:function(){return this._value},set:function(n){this._value=n}},{key:"previousPosition",get:function(){return this._previousPosition},set:function(n){this._previousPosition=n}},{key:"x",get:function(){return this._x},set:function(n){this._x=n}},{key:"y",get:function(){return this._y},set:function(n){this._y=n}},{key:"mergedFrom",get:function(){return this._mergedFrom},set:function(n){this._mergedFrom=n}}])&&o(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),n}();function s(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var u,c=function(){function n(t,e){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this._size=void 0,this._cells=void 0,this._previousState=void 0,this.size=t,this.cells=e?this.fromState(e):this.empty()}var t,e;return t=n,(e=[{key:"empty",value:function(){for(var n=[],t=0;t<this.size;t++)for(var e=n[t]=[],r=0;r<this.size;r++)e.push(null);return n}},{key:"fromState",value:function(n){for(var t=[],e=0;e<this.size;e++)for(var r=t[e]=[],i=0;i<this.size;i++){var o=n[e][i];o?r.push(new a(o.position,o.value)):r.push(null)}return t}},{key:"randomAvailableCell",value:function(){var n=this.availableCells();if(n.length)return n[Math.floor(Math.random()*n.length)]}},{key:"availableCells",value:function(){var n=[];return this.eachCell((function(t,e,r){r||n.push({x:t,y:e})})),n}},{key:"eachCell",value:function(n){for(var t=0;t<this.size;t++)for(var e=0;e<this.size;e++)n(t,e,this.cells[t][e])}},{key:"isCellsAvailable",value:function(){return!!this.availableCells().length}},{key:"isCellAvailable",value:function(n){return!this.isCellOccupied(n)}},{key:"isCellOccupied",value:function(n){return!!this.cellContent(n)}},{key:"cellContent",value:function(n){return this.withinBounds(n)?this.cells[n.x][n.y]:null}},{key:"insertTile",value:function(n){this.cells[n.x][n.y]=n}},{key:"removeTile",value:function(n){this.cells[n.x][n.y]=null}},{key:"withinBounds",value:function(n){return n.x>=0&&n.x<this.size&&n.y>=0&&n.y<this.size}},{key:"serialize",value:function(){for(var n=[],t=0;t<this.size;t++)for(var e=n[t]=[],r=0;r<this.size;r++)this.cells[t][r]?e.push(this.cells[t][r].serialize()):e.push(null);return{size:this.size,cells:n}}},{key:"size",get:function(){return this._size},set:function(n){this._size=n}},{key:"cells",get:function(){return this._cells},set:function(n){this._cells=n}},{key:"previousState",get:function(){return this._previousState},set:function(n){this._previousState=n}}])&&s(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),n}(),l=e(700);function p(n,t){var e="undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!e){if(Array.isArray(n)||(e=function(n,t){if(n){if("string"==typeof n)return f(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?f(n,t):void 0}}(n))||t&&n&&"number"==typeof n.length){e&&(n=e);var r=0,i=function(){};return{s:i,n:function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}},e:function(n){throw n},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){e=e.call(n)},n:function(){var n=e.next();return a=n.done,n},e:function(n){s=!0,o=n},f:function(){try{a||null==e.return||e.return()}finally{if(s)throw o}}}}function f(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}function d(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var h,g=(0,l.b2)()(u=function(){function n(t,e,r){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.actuator=t,this.input=e,this.storage=r,this.over=void 0,this.won=void 0,this.isPlaying=void 0,this.grid=void 0,this.score=void 0,this.size=4,this.startCells=2}var t,e;return t=n,(e=[{key:"run",value:function(){this.input.on("move",this.move.bind(this)),this.input.on("restart",this.restart.bind(this)),this.input.on("keepPlaying",this.keepPlaying.bind(this)),this.setup()}},{key:"restart",value:function(){this.storage.clearGameState(),this.actuator.continueGame(),this.setup()}},{key:"keepPlaying",value:function(){this.isPlaying=!0,this.actuator.continueGame()}},{key:"isGameTerminated",get:function(){return this.over||this.won&&!this.isPlaying}},{key:"setup",value:function(){var n=this.storage.gameState;n?(this.grid=new c(n.grid.size,n.grid.cells),this.score=n.score,this.over=n.over,this.won=n.won,this.keepPlaying=n.keepPlaying):(this.grid=new c(this.size,null),this.score=0,this.over=!1,this.won=!1,this.isPlaying=!1,this.addStartTiles()),this.actuate()}},{key:"addStartTiles",value:function(){for(var n=0;n<this.startCells;n++)this.addRandomTile()}},{key:"addRandomTile",value:function(){if(this.grid.isCellsAvailable()){var n;n=Math.random()<.9?2:4;var t=new a(this.grid.randomAvailableCell(),n);this.grid.insertTile(t)}}},{key:"actuate",value:function(){this.storage.bestScore<this.score&&(this.storage.bestScore=this.score),this.over?this.storage.clearGameState():this.storage.gameState=this.serialize(),this.actuator.actuate(this.grid,{score:this.score,over:this.over,won:this.won,bestScore:this.storage.bestScore,terminated:this.isGameTerminated})}},{key:"serialize",value:function(){return{grid:this.grid.serialize(),score:this.score,over:this.over,won:this.won,keepPlaying:this.keepPlaying}}},{key:"prepareTiles",value:function(){this.grid.eachCell((function(n,t,e){e&&(e.mergedFrom=null,e.savePosition())}))}},{key:"moveTile",value:function(n,t){this.grid.cells[n.x][n.y]=null,this.grid.cells[t.x][t.y]=n,n.updatePosition(t)}},{key:"move",value:function(n){if(!this.isGameTerminated){var t,e,r=this.getVector(n),i=this.buildTraversals(r),o=!1;this.prepareTiles();var s,u=p(i.x);try{for(u.s();!(s=u.n()).done;){var c,l=s.value,f=p(i.y);try{for(f.s();!(c=f.n()).done;)if(t={x:l,y:c.value},e=this.grid.cellContent(t)){var d=this.findFarthestPosition(t,r),h=this.grid.cellContent(d.next);if(h&&h.value===e.value&&!h.mergedFrom){var g=new a(d.next,2*e.value);g.mergedFrom=[e,h],this.grid.insertTile(g),this.grid.removeTile(e),e.updatePosition(d.next),this.score+=g.value,2048===g.value&&(this.won=!0)}else this.moveTile(e,d.farthest);this.positionsEquals(t,e)||(o=!0)}}catch(n){f.e(n)}finally{f.f()}}}catch(n){u.e(n)}finally{u.f()}o&&(this.addRandomTile(),this.isMovesAvailable()||(this.over=!0),this.actuate())}}},{key:"getVector",value:function(n){return[{x:0,y:-1},{x:1,y:0},{x:0,y:1},{x:-1,y:0}][n]}},{key:"buildTraversals",value:function(n){for(var t={x:[],y:[]},e=0;e<this.size;e++)t.x.push(e),t.y.push(e);return 1===n.x&&(t.x=t.x.reverse()),1===n.y&&(t.y=t.y.reverse()),t}},{key:"findFarthestPosition",value:function(n,t){var e;do{n={x:(e=n).x+t.x,y:e.y+t.y}}while(this.grid.withinBounds(n)&&this.grid.isCellAvailable(n));return{farthest:e,next:n}}},{key:"isMovesAvailable",value:function(){return this.grid.isCellsAvailable()||this.isTileMatchesAvailable()}},{key:"isTileMatchesAvailable",value:function(){for(var n,t=0;t<this.size;t++)for(var e=0;e<this.size;e++)if(n=this.grid.cellContent({x:t,y:e}))for(var r=0;r<4;r++){var i=this.getVector(r),o={x:t+i.x,y:e+i.y},a=this.grid.cellContent(o);if(a&&a.value===n.value)return!0}return!1}},{key:"positionsEquals",value:function(n,t){return n.x===t.x&&n.y===t.y}}])&&d(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),n}())||u;function m(n,t){var e="undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!e){if(Array.isArray(n)||(e=function(n,t){if(n){if("string"==typeof n)return y(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?y(n,t):void 0}}(n))||t&&n&&"number"==typeof n.length){e&&(n=e);var r=0,i=function(){};return{s:i,n:function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}},e:function(n){throw n},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){e=e.call(n)},n:function(){var n=e.next();return a=n.done,n},e:function(n){s=!0,o=n},f:function(){try{a||null==e.return||e.return()}finally{if(s)throw o}}}}function y(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}function v(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}e(660);var b,_,x=(0,l.b2)()(h=function(){function n(){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.tileContainer=document.querySelector(".tile-container"),this.scoreContainer=document.querySelector(".score-container"),this.bestContainer=document.querySelector(".best-container"),this.gridContainer=document.querySelector(".grid-container"),this.gameContainer=document.querySelector(".game-message"),this.score=0,this.createCells()}var t,e;return t=n,e=[{key:"createCells",value:function(){for(var n,t,e=0;e<4;e++){(n=document.createElement("div")).className="grid-row";for(var r=0;r<4;r++)(t=document.createElement("div")).className="grid-cell",n.appendChild(t);this.gridContainer.appendChild(n)}}},{key:"actuate",value:function(n,t){var e=this;window.requestAnimationFrame((function(){e.clearContainer(e.tileContainer);var r,i=m(n.cells);try{for(i.s();!(r=i.n()).done;){var o,a=m(r.value);try{for(a.s();!(o=a.n()).done;){var s=o.value;s&&e.addTile(s)}}catch(n){a.e(n)}finally{a.f()}}}catch(n){i.e(n)}finally{i.f()}e.updateScore(t.score),e.updateBestScore(t.bestScore),t.terminated&&(t.won?e.message(!0):e.message(!1))}))}},{key:"continueGame",value:function(){this.clearMessage()}},{key:"clearContainer",value:function(n){for(;n.firstChild;)n.removeChild(n.firstChild)}},{key:"addTile",value:function(n){var t=this,e=document.createElement("div"),r=document.createElement("div"),i=n.previousPosition||{x:n.x,y:n.y},o=this.positionClass(i),a=["tile","tile-".concat(n.value),o];if(n.value>2048&&a.push("tile-super"),this.applyClasses(e,a),r.classList.add("tile-inner"),r.innerHTML=n.value.toString(),n.previousPosition)window.requestAnimationFrame((function(){a[2]=t.positionClass({x:n.x,y:n.y}),t.applyClasses(e,a)}));else if(n.mergedFrom){a.push("tile-merged"),this.applyClasses(e,a);var s,u=m(n.mergedFrom);try{for(u.s();!(s=u.n()).done;){var c=s.value;this.addTile(c)}}catch(n){u.e(n)}finally{u.f()}}else a.push("tile-new"),this.applyClasses(e,a);e.appendChild(r),this.tileContainer.appendChild(e)}},{key:"applyClasses",value:function(n,t){n.className=t.join(" ")}},{key:"normalizePosition",value:function(n){return{x:n.x+1,y:n.y+1}}},{key:"positionClass",value:function(n){return n=this.normalizePosition(n),"tile-position-".concat(n.x,"-").concat(n.y)}},{key:"updateScore",value:function(n){this.clearContainer(this.scoreContainer),this.score=n,this.scoreContainer.innerHTML=this.score.toString()}},{key:"updateBestScore",value:function(n){this.bestContainer.innerHTML=n.toString()}},{key:"message",value:function(n){var t,e;n?(e="game-won",t="You win!"):(e="game-over",t="Game over!"),this.gameContainer.classList.add(e),this.gameContainer.querySelector(".message").innerHTML=t}},{key:"clearMessage",value:function(){this.gameContainer.classList.remove("game-won"),this.gameContainer.classList.remove("game-over")}}],e&&v(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),n}())||h;function w(n){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},w(n)}function T(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}function A(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}!function(n){n[n.Up=0]="Up",n[n.Right=1]="Right",n[n.Down=2]="Down",n[n.Left=3]="Left"}(b||(b={}));var S,E=(0,l.b2)()(_=function(){function n(){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.events=void 0,this.eventTouchStart=void 0,this.eventTouchMove=void 0,this.eventTouchEnd=void 0,this.events=[],this.eventTouchStart="touchstart",this.eventTouchMove="touchmove",this.eventTouchEnd="touchend",this.listen()}var t,e;return t=n,(e=[{key:"on",value:function(n,t){this.events[n]||(this.events[n]=[]),this.events[n].push(t)}},{key:"emit",value:function(n,t){var e=this.events[n];if(e){var r,i=function(n,t){var e="undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(!e){if(Array.isArray(n)||(e=function(n,t){if(n){if("string"==typeof n)return T(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?T(n,t):void 0}}(n))||t&&n&&"number"==typeof n.length){e&&(n=e);var r=0,i=function(){};return{s:i,n:function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}},e:function(n){throw n},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){e=e.call(n)},n:function(){var n=e.next();return a=n.done,n},e:function(n){s=!0,o=n},f:function(){try{a||null==e.return||e.return()}finally{if(s)throw o}}}}(e);try{for(i.s();!(r=i.n()).done;)(0,r.value)(t)}catch(n){i.e(n)}finally{i.f()}}}},{key:"listen",value:function(){var n,t,e,r=this;document.addEventListener("keydown",(function(t){if(!(t.altKey||t.ctrlKey||t.metaKey||t.shiftKey))switch(t.code){case"ArrowLeft":n=b.Left;break;case"ArrowUp":n=b.Up;break;case"ArrowRight":n=b.Right;break;case"ArrowDown":n=b.Down}void 0!==w(n)&&(t.preventDefault(),r.emit("move",n))})),this.bindButtonPress(".retry-button",this.restart),this.bindButtonPress(".restart-button",this.restart),this.bindButtonPress(".keep-playing-button",this.keepPlaying);var i=document.querySelector(".game-container");i.addEventListener(this.eventTouchStart,(function(n){t=n.touches[0].clientX,e=n.touches[0].clientY,n.preventDefault()})),i.addEventListener(this.eventTouchMove,(function(n){return n.preventDefault()})),i.addEventListener(this.eventTouchEnd,(function(n){var i,o;i=n.changedTouches[0].clientX,o=n.changedTouches[0].clientY;var a=i-t,s=Math.abs(a),u=o-e,c=Math.abs(u);Math.max(s,c)>10&&r.emit("move",s>c?a>0?1:3:u>0?2:0)}))}},{key:"restart",value:function(n){n.preventDefault(),this.emit("restart",null)}},{key:"keepPlaying",value:function(n){n.preventDefault(),this.emit("keepPlaying",null)}},{key:"bindButtonPress",value:function(n,t){var e=document.querySelector(n);e.addEventListener("click",t.bind(this)),e.addEventListener(this.eventTouchEnd,t.bind(this))}}])&&A(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),n}())||_;function N(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var I=(0,l.b2)()(S=function(){function n(){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.bestScoreKey=void 0,this.gameStateKey=void 0,this.storage=void 0,this.bestScoreKey="bestScore",this.gameStateKey="gameState",this.storage=window.localStorage}var t,e;return t=n,(e=[{key:"clearGameState",value:function(){this.storage.removeItem(this.gameStateKey)}},{key:"bestScore",get:function(){return this.storage.getItem(this.bestScoreKey)||0},set:function(n){this.storage.setItem(this.bestScoreKey,n.toString())}},{key:"gameState",get:function(){var n=this.storage.getItem(this.gameStateKey);return n?JSON.parse(n):null},set:function(n){this.storage.setItem(this.gameStateKey,JSON.stringify(n))}}])&&N(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),n}())||S,O={Game:Symbol.for("Game"),HtmlActuator:Symbol.for("HtmlActuator"),KeyboardInputManager:Symbol.for("KeyboardInputManager"),LocalStorageManager:Symbol.for("LocalStorageManager")},C=new l.W2;C.bind(O.Game).to(g).inSingletonScope(),C.bind(O.HtmlActuator).to(x).inSingletonScope(),C.bind(O.KeyboardInputManager).to(E).inSingletonScope(),C.bind(O.LocalStorageManager).to(I).inSingletonScope(),window.requestAnimationFrame((function(){return C.resolve(g).run()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,